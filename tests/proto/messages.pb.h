// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "proto/KeyOption.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_messages_2eproto;
class ComplexKeyTestMessage;
struct ComplexKeyTestMessageDefaultTypeInternal;
extern ComplexKeyTestMessageDefaultTypeInternal _ComplexKeyTestMessage_default_instance_;
class ComplexKeyTestMessage_Position;
struct ComplexKeyTestMessage_PositionDefaultTypeInternal;
extern ComplexKeyTestMessage_PositionDefaultTypeInternal _ComplexKeyTestMessage_Position_default_instance_;
class ComplexMessage;
struct ComplexMessageDefaultTypeInternal;
extern ComplexMessageDefaultTypeInternal _ComplexMessage_default_instance_;
class ComplexMessage_MapMessage;
struct ComplexMessage_MapMessageDefaultTypeInternal;
extern ComplexMessage_MapMessageDefaultTypeInternal _ComplexMessage_MapMessage_default_instance_;
class ComplexMessage_MessageMapEntry_DoNotUse;
struct ComplexMessage_MessageMapEntry_DoNotUseDefaultTypeInternal;
extern ComplexMessage_MessageMapEntry_DoNotUseDefaultTypeInternal _ComplexMessage_MessageMapEntry_DoNotUse_default_instance_;
class ComplexMessage_NestedMessage;
struct ComplexMessage_NestedMessageDefaultTypeInternal;
extern ComplexMessage_NestedMessageDefaultTypeInternal _ComplexMessage_NestedMessage_default_instance_;
class StringKeyMessage;
struct StringKeyMessageDefaultTypeInternal;
extern StringKeyMessageDefaultTypeInternal _StringKeyMessage_default_instance_;
class TestKeyMessage;
struct TestKeyMessageDefaultTypeInternal;
extern TestKeyMessageDefaultTypeInternal _TestKeyMessage_default_instance_;
class TestMap;
struct TestMapDefaultTypeInternal;
extern TestMapDefaultTypeInternal _TestMap_default_instance_;
class TestMap_DataEntry_DoNotUse;
struct TestMap_DataEntry_DoNotUseDefaultTypeInternal;
extern TestMap_DataEntry_DoNotUseDefaultTypeInternal _TestMap_DataEntry_DoNotUse_default_instance_;
class TestMessage;
struct TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
class TestMessage_TestNestedMessage;
struct TestMessage_TestNestedMessageDefaultTypeInternal;
extern TestMessage_TestNestedMessageDefaultTypeInternal _TestMessage_TestNestedMessage_default_instance_;
class TestRepeated;
struct TestRepeatedDefaultTypeInternal;
extern TestRepeatedDefaultTypeInternal _TestRepeated_default_instance_;
class TestRepeated_TestMessage;
struct TestRepeated_TestMessageDefaultTypeInternal;
extern TestRepeated_TestMessageDefaultTypeInternal _TestRepeated_TestMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::ComplexKeyTestMessage* Arena::CreateMaybeMessage<::ComplexKeyTestMessage>(Arena*);
template <>
::ComplexKeyTestMessage_Position* Arena::CreateMaybeMessage<::ComplexKeyTestMessage_Position>(Arena*);
template <>
::ComplexMessage* Arena::CreateMaybeMessage<::ComplexMessage>(Arena*);
template <>
::ComplexMessage_MapMessage* Arena::CreateMaybeMessage<::ComplexMessage_MapMessage>(Arena*);
template <>
::ComplexMessage_MessageMapEntry_DoNotUse* Arena::CreateMaybeMessage<::ComplexMessage_MessageMapEntry_DoNotUse>(Arena*);
template <>
::ComplexMessage_NestedMessage* Arena::CreateMaybeMessage<::ComplexMessage_NestedMessage>(Arena*);
template <>
::StringKeyMessage* Arena::CreateMaybeMessage<::StringKeyMessage>(Arena*);
template <>
::TestKeyMessage* Arena::CreateMaybeMessage<::TestKeyMessage>(Arena*);
template <>
::TestMap* Arena::CreateMaybeMessage<::TestMap>(Arena*);
template <>
::TestMap_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::TestMap_DataEntry_DoNotUse>(Arena*);
template <>
::TestMessage* Arena::CreateMaybeMessage<::TestMessage>(Arena*);
template <>
::TestMessage_TestNestedMessage* Arena::CreateMaybeMessage<::TestMessage_TestNestedMessage>(Arena*);
template <>
::TestRepeated* Arena::CreateMaybeMessage<::TestRepeated>(Arena*);
template <>
::TestRepeated_TestMessage* Arena::CreateMaybeMessage<::TestRepeated_TestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TestMessage_TestEnum : int {
  TestMessage_TestEnum_val0 = 0,
  TestMessage_TestEnum_val1 = 1,
  TestMessage_TestEnum_val2 = 2,
  TestMessage_TestEnum_val3 = 3,
  TestMessage_TestEnum_TestMessage_TestEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TestMessage_TestEnum_TestMessage_TestEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TestMessage_TestEnum_IsValid(int value);
constexpr TestMessage_TestEnum TestMessage_TestEnum_TestEnum_MIN = static_cast<TestMessage_TestEnum>(0);
constexpr TestMessage_TestEnum TestMessage_TestEnum_TestEnum_MAX = static_cast<TestMessage_TestEnum>(3);
constexpr int TestMessage_TestEnum_TestEnum_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TestMessage_TestEnum_descriptor();
template <typename T>
const std::string& TestMessage_TestEnum_Name(T value) {
  static_assert(std::is_same<T, TestMessage_TestEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TestEnum_Name().");
  return TestMessage_TestEnum_Name(static_cast<TestMessage_TestEnum>(value));
}
template <>
inline const std::string& TestMessage_TestEnum_Name(TestMessage_TestEnum value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TestMessage_TestEnum_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TestMessage_TestEnum_Parse(absl::string_view name, TestMessage_TestEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestMessage_TestEnum>(
      TestMessage_TestEnum_descriptor(), name, value);
}
enum ComplexKeyTestMessage_TestEnum : int {
  ComplexKeyTestMessage_TestEnum_val0 = 0,
  ComplexKeyTestMessage_TestEnum_val1 = 1,
  ComplexKeyTestMessage_TestEnum_val2 = 2,
  ComplexKeyTestMessage_TestEnum_val3 = 3,
  ComplexKeyTestMessage_TestEnum_ComplexKeyTestMessage_TestEnum_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ComplexKeyTestMessage_TestEnum_ComplexKeyTestMessage_TestEnum_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ComplexKeyTestMessage_TestEnum_IsValid(int value);
constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage_TestEnum_TestEnum_MIN = static_cast<ComplexKeyTestMessage_TestEnum>(0);
constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage_TestEnum_TestEnum_MAX = static_cast<ComplexKeyTestMessage_TestEnum>(3);
constexpr int ComplexKeyTestMessage_TestEnum_TestEnum_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ComplexKeyTestMessage_TestEnum_descriptor();
template <typename T>
const std::string& ComplexKeyTestMessage_TestEnum_Name(T value) {
  static_assert(std::is_same<T, ComplexKeyTestMessage_TestEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TestEnum_Name().");
  return ComplexKeyTestMessage_TestEnum_Name(static_cast<ComplexKeyTestMessage_TestEnum>(value));
}
template <>
inline const std::string& ComplexKeyTestMessage_TestEnum_Name(ComplexKeyTestMessage_TestEnum value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ComplexKeyTestMessage_TestEnum_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ComplexKeyTestMessage_TestEnum_Parse(absl::string_view name, ComplexKeyTestMessage_TestEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComplexKeyTestMessage_TestEnum>(
      ComplexKeyTestMessage_TestEnum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TestMessage_TestNestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestMessage.TestNestedMessage) */ {
 public:
  inline TestMessage_TestNestedMessage() : TestMessage_TestNestedMessage(nullptr) {}
  ~TestMessage_TestNestedMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestMessage_TestNestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage_TestNestedMessage(const TestMessage_TestNestedMessage& from);
  TestMessage_TestNestedMessage(TestMessage_TestNestedMessage&& from) noexcept
    : TestMessage_TestNestedMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage_TestNestedMessage& operator=(const TestMessage_TestNestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage_TestNestedMessage& operator=(TestMessage_TestNestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage_TestNestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage_TestNestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage_TestNestedMessage*>(
               &_TestMessage_TestNestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage_TestNestedMessage& a, TestMessage_TestNestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage_TestNestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage_TestNestedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage_TestNestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage_TestNestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage_TestNestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMessage_TestNestedMessage& from) {
    TestMessage_TestNestedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage_TestNestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TestMessage.TestNestedMessage";
  }
  protected:
  explicit TestMessage_TestNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestMessage.TestNestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class TestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  ~TestMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessage(const TestMessage& from);
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMessage& from) {
    TestMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TestMessage";
  }
  protected:
  explicit TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMessage_TestNestedMessage TestNestedMessage;

  using TestEnum = TestMessage_TestEnum;
  static constexpr TestEnum val0 = TestMessage_TestEnum_val0;
  static constexpr TestEnum val1 = TestMessage_TestEnum_val1;
  static constexpr TestEnum val2 = TestMessage_TestEnum_val2;
  static constexpr TestEnum val3 = TestMessage_TestEnum_val3;
  static inline bool TestEnum_IsValid(int value) {
    return TestMessage_TestEnum_IsValid(value);
  }
  static constexpr TestEnum TestEnum_MIN = TestMessage_TestEnum_TestEnum_MIN;
  static constexpr TestEnum TestEnum_MAX = TestMessage_TestEnum_TestEnum_MAX;
  static constexpr int TestEnum_ARRAYSIZE = TestMessage_TestEnum_TestEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
    return TestMessage_TestEnum_descriptor();
  }
  template <typename T>
  static inline const std::string& TestEnum_Name(T value) {
    return TestMessage_TestEnum_Name(value);
  }
  static inline bool TestEnum_Parse(absl::string_view name, TestEnum* value) {
    return TestMessage_TestEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 2,
    kNestedMessageFieldNumber = 3,
    kValueFieldNumber = 1,
    kEnumValueFieldNumber = 4,
  };
  // string stringValue = 2;
  void clear_stringvalue() ;
  const std::string& stringvalue() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stringvalue(Arg_&& arg, Args_... args);
  std::string* mutable_stringvalue();
  PROTOBUF_NODISCARD std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* ptr);

  private:
  const std::string& _internal_stringvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringvalue(
      const std::string& value);
  std::string* _internal_mutable_stringvalue();

  public:
  // .TestMessage.TestNestedMessage nestedMessage = 3;
  bool has_nestedmessage() const;
  void clear_nestedmessage() ;
  const ::TestMessage_TestNestedMessage& nestedmessage() const;
  PROTOBUF_NODISCARD ::TestMessage_TestNestedMessage* release_nestedmessage();
  ::TestMessage_TestNestedMessage* mutable_nestedmessage();
  void set_allocated_nestedmessage(::TestMessage_TestNestedMessage* nestedmessage);
  private:
  const ::TestMessage_TestNestedMessage& _internal_nestedmessage() const;
  ::TestMessage_TestNestedMessage* _internal_mutable_nestedmessage();
  public:
  void unsafe_arena_set_allocated_nestedmessage(
      ::TestMessage_TestNestedMessage* nestedmessage);
  ::TestMessage_TestNestedMessage* unsafe_arena_release_nestedmessage();
  // int32 value = 1;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // .TestMessage.TestEnum enumValue = 4;
  void clear_enumvalue() ;
  ::TestMessage_TestEnum enumvalue() const;
  void set_enumvalue(::TestMessage_TestEnum value);

  private:
  ::TestMessage_TestEnum _internal_enumvalue() const;
  void _internal_set_enumvalue(::TestMessage_TestEnum value);

  public:
  // @@protoc_insertion_point(class_scope:TestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
    ::TestMessage_TestNestedMessage* nestedmessage_;
    ::int32_t value_;
    int enumvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class TestMap_DataEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMap_DataEntry_DoNotUse, 
    std::string, ::int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMap_DataEntry_DoNotUse, 
    std::string, ::int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  TestMap_DataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMap_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestMap_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMap_DataEntry_DoNotUse& other);
  static const TestMap_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMap_DataEntry_DoNotUse*>(&_TestMap_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TestMap.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TestMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestMap) */ {
 public:
  inline TestMap() : TestMap(nullptr) {}
  ~TestMap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMap(const TestMap& from);
  TestMap(TestMap&& from) noexcept
    : TestMap() {
    *this = ::std::move(from);
  }

  inline TestMap& operator=(const TestMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMap& operator=(TestMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMap* internal_default_instance() {
    return reinterpret_cast<const TestMap*>(
               &_TestMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestMap& a, TestMap& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMap& from) {
    TestMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TestMap";
  }
  protected:
  explicit TestMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, int32> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
      mutable_data();
  // @@protoc_insertion_point(class_scope:TestMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestMap_DataEntry_DoNotUse,
        std::string, ::int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class TestRepeated_TestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestRepeated.TestMessage) */ {
 public:
  inline TestRepeated_TestMessage() : TestRepeated_TestMessage(nullptr) {}
  ~TestRepeated_TestMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestRepeated_TestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRepeated_TestMessage(const TestRepeated_TestMessage& from);
  TestRepeated_TestMessage(TestRepeated_TestMessage&& from) noexcept
    : TestRepeated_TestMessage() {
    *this = ::std::move(from);
  }

  inline TestRepeated_TestMessage& operator=(const TestRepeated_TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRepeated_TestMessage& operator=(TestRepeated_TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRepeated_TestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRepeated_TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestRepeated_TestMessage*>(
               &_TestRepeated_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestRepeated_TestMessage& a, TestRepeated_TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRepeated_TestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRepeated_TestMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRepeated_TestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRepeated_TestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRepeated_TestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestRepeated_TestMessage& from) {
    TestRepeated_TestMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRepeated_TestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TestRepeated.TestMessage";
  }
  protected:
  explicit TestRepeated_TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
  };
  // string strValue = 1;
  void clear_strvalue() ;
  const std::string& strvalue() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strvalue(Arg_&& arg, Args_... args);
  std::string* mutable_strvalue();
  PROTOBUF_NODISCARD std::string* release_strvalue();
  void set_allocated_strvalue(std::string* ptr);

  private:
  const std::string& _internal_strvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strvalue(
      const std::string& value);
  std::string* _internal_mutable_strvalue();

  public:
  // int32 intValue = 2;
  void clear_intvalue() ;
  ::int32_t intvalue() const;
  void set_intvalue(::int32_t value);

  private:
  ::int32_t _internal_intvalue() const;
  void _internal_set_intvalue(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestRepeated.TestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strvalue_;
    ::int32_t intvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class TestRepeated final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestRepeated) */ {
 public:
  inline TestRepeated() : TestRepeated(nullptr) {}
  ~TestRepeated() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestRepeated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRepeated(const TestRepeated& from);
  TestRepeated(TestRepeated&& from) noexcept
    : TestRepeated() {
    *this = ::std::move(from);
  }

  inline TestRepeated& operator=(const TestRepeated& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRepeated& operator=(TestRepeated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRepeated& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRepeated* internal_default_instance() {
    return reinterpret_cast<const TestRepeated*>(
               &_TestRepeated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TestRepeated& a, TestRepeated& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRepeated* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRepeated* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRepeated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRepeated>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRepeated& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestRepeated& from) {
    TestRepeated::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRepeated* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TestRepeated";
  }
  protected:
  explicit TestRepeated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestRepeated_TestMessage TestMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // repeated .TestRepeated.TestMessage msg = 1;
  int msg_size() const;
  private:
  int _internal_msg_size() const;

  public:
  void clear_msg() ;
  ::TestRepeated_TestMessage* mutable_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestRepeated_TestMessage >*
      mutable_msg();
  private:
  const ::TestRepeated_TestMessage& _internal_msg(int index) const;
  ::TestRepeated_TestMessage* _internal_add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::TestRepeated_TestMessage>& _internal_msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::TestRepeated_TestMessage>* _internal_mutable_msg();
  public:
  const ::TestRepeated_TestMessage& msg(int index) const;
  ::TestRepeated_TestMessage* add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestRepeated_TestMessage >&
      msg() const;
  // @@protoc_insertion_point(class_scope:TestRepeated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestRepeated_TestMessage > msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class ComplexMessage_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComplexMessage.NestedMessage) */ {
 public:
  inline ComplexMessage_NestedMessage() : ComplexMessage_NestedMessage(nullptr) {}
  ~ComplexMessage_NestedMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexMessage_NestedMessage(const ComplexMessage_NestedMessage& from);
  ComplexMessage_NestedMessage(ComplexMessage_NestedMessage&& from) noexcept
    : ComplexMessage_NestedMessage() {
    *this = ::std::move(from);
  }

  inline ComplexMessage_NestedMessage& operator=(const ComplexMessage_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexMessage_NestedMessage& operator=(ComplexMessage_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexMessage_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexMessage_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexMessage_NestedMessage*>(
               &_ComplexMessage_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ComplexMessage_NestedMessage& a, ComplexMessage_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexMessage_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexMessage_NestedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexMessage_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexMessage_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexMessage_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexMessage_NestedMessage& from) {
    ComplexMessage_NestedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexMessage_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ComplexMessage.NestedMessage";
  }
  protected:
  explicit ComplexMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated int32 value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  ::int32_t value(int index) const;
  void set_value(int index, ::int32_t value);
  void add_value(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_value();

  private:
  ::int32_t _internal_value(int index) const;
  void _internal_add_value(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_value();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ComplexMessage.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _value_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class ComplexMessage_MapMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComplexMessage.MapMessage) */ {
 public:
  inline ComplexMessage_MapMessage() : ComplexMessage_MapMessage(nullptr) {}
  ~ComplexMessage_MapMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexMessage_MapMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexMessage_MapMessage(const ComplexMessage_MapMessage& from);
  ComplexMessage_MapMessage(ComplexMessage_MapMessage&& from) noexcept
    : ComplexMessage_MapMessage() {
    *this = ::std::move(from);
  }

  inline ComplexMessage_MapMessage& operator=(const ComplexMessage_MapMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexMessage_MapMessage& operator=(ComplexMessage_MapMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexMessage_MapMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexMessage_MapMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexMessage_MapMessage*>(
               &_ComplexMessage_MapMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ComplexMessage_MapMessage& a, ComplexMessage_MapMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexMessage_MapMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexMessage_MapMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexMessage_MapMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexMessage_MapMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexMessage_MapMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexMessage_MapMessage& from) {
    ComplexMessage_MapMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexMessage_MapMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ComplexMessage.MapMessage";
  }
  protected:
  explicit ComplexMessage_MapMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // repeated string str = 2;
  int str_size() const;
  private:
  int _internal_str_size() const;

  public:
  void clear_str() ;
  const std::string& str(int index) const;
  std::string* mutable_str(int index);
  void set_str(int index, const std::string& value);
  void set_str(int index, std::string&& value);
  void set_str(int index, const char* value);
  void set_str(int index, const char* value, std::size_t size);
  void set_str(int index, absl::string_view value);
  std::string* add_str();
  void add_str(const std::string& value);
  void add_str(std::string&& value);
  void add_str(const char* value);
  void add_str(const char* value, std::size_t size);
  void add_str(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str();

  private:
  const std::string& _internal_str(int index) const;
  std::string* _internal_add_str();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_str();

  public:
  // int64 value = 1;
  void clear_value() ;
  ::int64_t value() const;
  void set_value(::int64_t value);

  private:
  ::int64_t _internal_value() const;
  void _internal_set_value(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ComplexMessage.MapMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_;
    ::int64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class ComplexMessage_MessageMapEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComplexMessage_MessageMapEntry_DoNotUse, 
    std::string, ::ComplexMessage_MapMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComplexMessage_MessageMapEntry_DoNotUse, 
    std::string, ::ComplexMessage_MapMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ComplexMessage_MessageMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexMessage_MessageMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ComplexMessage_MessageMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComplexMessage_MessageMapEntry_DoNotUse& other);
  static const ComplexMessage_MessageMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComplexMessage_MessageMapEntry_DoNotUse*>(&_ComplexMessage_MessageMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ComplexMessage.MessageMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ComplexMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComplexMessage) */ {
 public:
  inline ComplexMessage() : ComplexMessage(nullptr) {}
  ~ComplexMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexMessage(const ComplexMessage& from);
  ComplexMessage(ComplexMessage&& from) noexcept
    : ComplexMessage() {
    *this = ::std::move(from);
  }

  inline ComplexMessage& operator=(const ComplexMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexMessage& operator=(ComplexMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexMessage*>(
               &_ComplexMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ComplexMessage& a, ComplexMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexMessage& from) {
    ComplexMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ComplexMessage";
  }
  protected:
  explicit ComplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComplexMessage_NestedMessage NestedMessage;
  typedef ComplexMessage_MapMessage MapMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kMessageMapFieldNumber = 2,
    kValuesFieldNumber = 3,
    kStrFieldNumber = 4,
    kNumValueFieldNumber = 5,
  };
  // repeated .ComplexMessage.NestedMessage msg = 1;
  int msg_size() const;
  private:
  int _internal_msg_size() const;

  public:
  void clear_msg() ;
  ::ComplexMessage_NestedMessage* mutable_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ComplexMessage_NestedMessage >*
      mutable_msg();
  private:
  const ::ComplexMessage_NestedMessage& _internal_msg(int index) const;
  ::ComplexMessage_NestedMessage* _internal_add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ComplexMessage_NestedMessage>& _internal_msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ComplexMessage_NestedMessage>* _internal_mutable_msg();
  public:
  const ::ComplexMessage_NestedMessage& msg(int index) const;
  ::ComplexMessage_NestedMessage* add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ComplexMessage_NestedMessage >&
      msg() const;
  // map<string, .ComplexMessage.MapMessage> messageMap = 2;
  int messagemap_size() const;
  private:
  int _internal_messagemap_size() const;

  public:
  void clear_messagemap() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >&
      _internal_messagemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >*
      _internal_mutable_messagemap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >&
      messagemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >*
      mutable_messagemap();
  // repeated int32 values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int32_t values(int index) const;
  void set_values(int index, ::int32_t value);
  void add_values(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_values();

  private:
  ::int32_t _internal_values(int index) const;
  void _internal_add_values(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_values();

  public:
  // string str = 4;
  void clear_str() ;
  const std::string& str() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str(Arg_&& arg, Args_... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* ptr);

  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(
      const std::string& value);
  std::string* _internal_mutable_str();

  public:
  // int32 numValue = 5;
  void clear_numvalue() ;
  ::int32_t numvalue() const;
  void set_numvalue(::int32_t value);

  private:
  ::int32_t _internal_numvalue() const;
  void _internal_set_numvalue(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ComplexMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ComplexMessage_NestedMessage > msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ComplexMessage_MessageMapEntry_DoNotUse,
        std::string, ::ComplexMessage_MapMessage,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> messagemap_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _values_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    ::int32_t numvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class TestKeyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestKeyMessage) */ {
 public:
  inline TestKeyMessage() : TestKeyMessage(nullptr) {}
  ~TestKeyMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestKeyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestKeyMessage(const TestKeyMessage& from);
  TestKeyMessage(TestKeyMessage&& from) noexcept
    : TestKeyMessage() {
    *this = ::std::move(from);
  }

  inline TestKeyMessage& operator=(const TestKeyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestKeyMessage& operator=(TestKeyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestKeyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestKeyMessage* internal_default_instance() {
    return reinterpret_cast<const TestKeyMessage*>(
               &_TestKeyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TestKeyMessage& a, TestKeyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestKeyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestKeyMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestKeyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestKeyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestKeyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestKeyMessage& from) {
    TestKeyMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestKeyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TestKeyMessage";
  }
  protected:
  explicit TestKeyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumValuesFieldNumber = 3,
    kDataFieldNumber = 4,
    kIndexFieldNumber = 1,
  };
  // repeated int64 numValues = 3;
  int numvalues_size() const;
  private:
  int _internal_numvalues_size() const;

  public:
  void clear_numvalues() ;
  ::int64_t numvalues(int index) const;
  void set_numvalues(int index, ::int64_t value);
  void add_numvalues(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& numvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_numvalues();

  private:
  ::int64_t _internal_numvalues(int index) const;
  void _internal_add_numvalues(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_numvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_numvalues();

  public:
  // string data = 4;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // int32 index = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestKeyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> numvalues_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _numvalues_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class StringKeyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StringKeyMessage) */ {
 public:
  inline StringKeyMessage() : StringKeyMessage(nullptr) {}
  ~StringKeyMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StringKeyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringKeyMessage(const StringKeyMessage& from);
  StringKeyMessage(StringKeyMessage&& from) noexcept
    : StringKeyMessage() {
    *this = ::std::move(from);
  }

  inline StringKeyMessage& operator=(const StringKeyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringKeyMessage& operator=(StringKeyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringKeyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringKeyMessage* internal_default_instance() {
    return reinterpret_cast<const StringKeyMessage*>(
               &_StringKeyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StringKeyMessage& a, StringKeyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StringKeyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringKeyMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringKeyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringKeyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringKeyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringKeyMessage& from) {
    StringKeyMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringKeyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "StringKeyMessage";
  }
  protected:
  explicit StringKeyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNumberFieldNumber = 2,
    kFloatNumberFieldNumber = 3,
  };
  // string name = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 number = 2;
  void clear_number() ;
  ::uint64_t number() const;
  void set_number(::uint64_t value);

  private:
  ::uint64_t _internal_number() const;
  void _internal_set_number(::uint64_t value);

  public:
  // float floatNumber = 3;
  void clear_floatnumber() ;
  float floatnumber() const;
  void set_floatnumber(float value);

  private:
  float _internal_floatnumber() const;
  void _internal_set_floatnumber(float value);

  public:
  // @@protoc_insertion_point(class_scope:StringKeyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t number_;
    float floatnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class ComplexKeyTestMessage_Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComplexKeyTestMessage.Position) */ {
 public:
  inline ComplexKeyTestMessage_Position() : ComplexKeyTestMessage_Position(nullptr) {}
  ~ComplexKeyTestMessage_Position() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexKeyTestMessage_Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexKeyTestMessage_Position(const ComplexKeyTestMessage_Position& from);
  ComplexKeyTestMessage_Position(ComplexKeyTestMessage_Position&& from) noexcept
    : ComplexKeyTestMessage_Position() {
    *this = ::std::move(from);
  }

  inline ComplexKeyTestMessage_Position& operator=(const ComplexKeyTestMessage_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexKeyTestMessage_Position& operator=(ComplexKeyTestMessage_Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexKeyTestMessage_Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexKeyTestMessage_Position* internal_default_instance() {
    return reinterpret_cast<const ComplexKeyTestMessage_Position*>(
               &_ComplexKeyTestMessage_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ComplexKeyTestMessage_Position& a, ComplexKeyTestMessage_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexKeyTestMessage_Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexKeyTestMessage_Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexKeyTestMessage_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexKeyTestMessage_Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexKeyTestMessage_Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexKeyTestMessage_Position& from) {
    ComplexKeyTestMessage_Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexKeyTestMessage_Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ComplexKeyTestMessage.Position";
  }
  protected:
  explicit ComplexKeyTestMessage_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ComplexKeyTestMessage.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t x_;
    ::int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class ComplexKeyTestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComplexKeyTestMessage) */ {
 public:
  inline ComplexKeyTestMessage() : ComplexKeyTestMessage(nullptr) {}
  ~ComplexKeyTestMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexKeyTestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexKeyTestMessage(const ComplexKeyTestMessage& from);
  ComplexKeyTestMessage(ComplexKeyTestMessage&& from) noexcept
    : ComplexKeyTestMessage() {
    *this = ::std::move(from);
  }

  inline ComplexKeyTestMessage& operator=(const ComplexKeyTestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexKeyTestMessage& operator=(ComplexKeyTestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexKeyTestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexKeyTestMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexKeyTestMessage*>(
               &_ComplexKeyTestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ComplexKeyTestMessage& a, ComplexKeyTestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexKeyTestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexKeyTestMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexKeyTestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexKeyTestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexKeyTestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexKeyTestMessage& from) {
    ComplexKeyTestMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexKeyTestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ComplexKeyTestMessage";
  }
  protected:
  explicit ComplexKeyTestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComplexKeyTestMessage_Position Position;

  using TestEnum = ComplexKeyTestMessage_TestEnum;
  static constexpr TestEnum val0 = ComplexKeyTestMessage_TestEnum_val0;
  static constexpr TestEnum val1 = ComplexKeyTestMessage_TestEnum_val1;
  static constexpr TestEnum val2 = ComplexKeyTestMessage_TestEnum_val2;
  static constexpr TestEnum val3 = ComplexKeyTestMessage_TestEnum_val3;
  static inline bool TestEnum_IsValid(int value) {
    return ComplexKeyTestMessage_TestEnum_IsValid(value);
  }
  static constexpr TestEnum TestEnum_MIN = ComplexKeyTestMessage_TestEnum_TestEnum_MIN;
  static constexpr TestEnum TestEnum_MAX = ComplexKeyTestMessage_TestEnum_TestEnum_MAX;
  static constexpr int TestEnum_ARRAYSIZE = ComplexKeyTestMessage_TestEnum_TestEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
    return ComplexKeyTestMessage_TestEnum_descriptor();
  }
  template <typename T>
  static inline const std::string& TestEnum_Name(T value) {
    return ComplexKeyTestMessage_TestEnum_Name(value);
  }
  static inline bool TestEnum_Parse(absl::string_view name, TestEnum* value) {
    return ComplexKeyTestMessage_TestEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNumValuesFieldNumber = 3,
    kDataFieldNumber = 2,
    kPosFieldNumber = 1,
    kEnumValueFieldNumber = 4,
  };
  // repeated int64 numValues = 3;
  int numvalues_size() const;
  private:
  int _internal_numvalues_size() const;

  public:
  void clear_numvalues() ;
  ::int64_t numvalues(int index) const;
  void set_numvalues(int index, ::int64_t value);
  void add_numvalues(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& numvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_numvalues();

  private:
  ::int64_t _internal_numvalues(int index) const;
  void _internal_add_numvalues(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_numvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_numvalues();

  public:
  // string data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .ComplexKeyTestMessage.Position pos = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  bool has_pos() const;
  void clear_pos() ;
  const ::ComplexKeyTestMessage_Position& pos() const;
  PROTOBUF_NODISCARD ::ComplexKeyTestMessage_Position* release_pos();
  ::ComplexKeyTestMessage_Position* mutable_pos();
  void set_allocated_pos(::ComplexKeyTestMessage_Position* pos);
  private:
  const ::ComplexKeyTestMessage_Position& _internal_pos() const;
  ::ComplexKeyTestMessage_Position* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::ComplexKeyTestMessage_Position* pos);
  ::ComplexKeyTestMessage_Position* unsafe_arena_release_pos();
  // .ComplexKeyTestMessage.TestEnum enumValue = 4;
  void clear_enumvalue() ;
  ::ComplexKeyTestMessage_TestEnum enumvalue() const;
  void set_enumvalue(::ComplexKeyTestMessage_TestEnum value);

  private:
  ::ComplexKeyTestMessage_TestEnum _internal_enumvalue() const;
  void _internal_set_enumvalue(::ComplexKeyTestMessage_TestEnum value);

  public:
  // @@protoc_insertion_point(class_scope:ComplexKeyTestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> numvalues_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _numvalues_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::ComplexKeyTestMessage_Position* pos_;
    int enumvalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestMessage_TestNestedMessage

// int32 value = 1;
inline void TestMessage_TestNestedMessage::clear_value() {
  _impl_.value_ = 0;
}
inline ::int32_t TestMessage_TestNestedMessage::value() const {
  // @@protoc_insertion_point(field_get:TestMessage.TestNestedMessage.value)
  return _internal_value();
}
inline void TestMessage_TestNestedMessage::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TestMessage.TestNestedMessage.value)
}
inline ::int32_t TestMessage_TestNestedMessage::_internal_value() const {
  return _impl_.value_;
}
inline void TestMessage_TestNestedMessage::_internal_set_value(::int32_t value) {
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// TestMessage

// int32 value = 1;
inline void TestMessage::clear_value() {
  _impl_.value_ = 0;
}
inline ::int32_t TestMessage::value() const {
  // @@protoc_insertion_point(field_get:TestMessage.value)
  return _internal_value();
}
inline void TestMessage::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TestMessage.value)
}
inline ::int32_t TestMessage::_internal_value() const {
  return _impl_.value_;
}
inline void TestMessage::_internal_set_value(::int32_t value) {
  ;
  _impl_.value_ = value;
}

// string stringValue = 2;
inline void TestMessage::clear_stringvalue() {
  _impl_.stringvalue_.ClearToEmpty();
}
inline const std::string& TestMessage::stringvalue() const {
  // @@protoc_insertion_point(field_get:TestMessage.stringValue)
  return _internal_stringvalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestMessage::set_stringvalue(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.stringvalue_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestMessage.stringValue)
}
inline std::string* TestMessage::mutable_stringvalue() {
  std::string* _s = _internal_mutable_stringvalue();
  // @@protoc_insertion_point(field_mutable:TestMessage.stringValue)
  return _s;
}
inline const std::string& TestMessage::_internal_stringvalue() const {
  return _impl_.stringvalue_.Get();
}
inline void TestMessage::_internal_set_stringvalue(const std::string& value) {
  ;


  _impl_.stringvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMessage::_internal_mutable_stringvalue() {
  ;
  return _impl_.stringvalue_.Mutable( GetArenaForAllocation());
}
inline std::string* TestMessage::release_stringvalue() {
  // @@protoc_insertion_point(field_release:TestMessage.stringValue)
  return _impl_.stringvalue_.Release();
}
inline void TestMessage::set_allocated_stringvalue(std::string* value) {
  _impl_.stringvalue_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stringvalue_.IsDefault()) {
          _impl_.stringvalue_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TestMessage.stringValue)
}

// .TestMessage.TestNestedMessage nestedMessage = 3;
inline bool TestMessage::has_nestedmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedmessage_ != nullptr);
  return value;
}
inline void TestMessage::clear_nestedmessage() {
  if (_impl_.nestedmessage_ != nullptr) _impl_.nestedmessage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TestMessage_TestNestedMessage& TestMessage::_internal_nestedmessage() const {
  const ::TestMessage_TestNestedMessage* p = _impl_.nestedmessage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestMessage_TestNestedMessage&>(
      ::_TestMessage_TestNestedMessage_default_instance_);
}
inline const ::TestMessage_TestNestedMessage& TestMessage::nestedmessage() const {
  // @@protoc_insertion_point(field_get:TestMessage.nestedMessage)
  return _internal_nestedmessage();
}
inline void TestMessage::unsafe_arena_set_allocated_nestedmessage(
    ::TestMessage_TestNestedMessage* nestedmessage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedmessage_);
  }
  _impl_.nestedmessage_ = nestedmessage;
  if (nestedmessage) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestMessage.nestedMessage)
}
inline ::TestMessage_TestNestedMessage* TestMessage::release_nestedmessage() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TestMessage_TestNestedMessage* temp = _impl_.nestedmessage_;
  _impl_.nestedmessage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestMessage_TestNestedMessage* TestMessage::unsafe_arena_release_nestedmessage() {
  // @@protoc_insertion_point(field_release:TestMessage.nestedMessage)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TestMessage_TestNestedMessage* temp = _impl_.nestedmessage_;
  _impl_.nestedmessage_ = nullptr;
  return temp;
}
inline ::TestMessage_TestNestedMessage* TestMessage::_internal_mutable_nestedmessage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nestedmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestMessage_TestNestedMessage>(GetArenaForAllocation());
    _impl_.nestedmessage_ = p;
  }
  return _impl_.nestedmessage_;
}
inline ::TestMessage_TestNestedMessage* TestMessage::mutable_nestedmessage() {
  ::TestMessage_TestNestedMessage* _msg = _internal_mutable_nestedmessage();
  // @@protoc_insertion_point(field_mutable:TestMessage.nestedMessage)
  return _msg;
}
inline void TestMessage::set_allocated_nestedmessage(::TestMessage_TestNestedMessage* nestedmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedmessage_;
  }
  if (nestedmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedmessage);
    if (message_arena != submessage_arena) {
      nestedmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedmessage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nestedmessage_ = nestedmessage;
  // @@protoc_insertion_point(field_set_allocated:TestMessage.nestedMessage)
}

// .TestMessage.TestEnum enumValue = 4;
inline void TestMessage::clear_enumvalue() {
  _impl_.enumvalue_ = 0;
}
inline ::TestMessage_TestEnum TestMessage::enumvalue() const {
  // @@protoc_insertion_point(field_get:TestMessage.enumValue)
  return _internal_enumvalue();
}
inline void TestMessage::set_enumvalue(::TestMessage_TestEnum value) {
   _internal_set_enumvalue(value);
  // @@protoc_insertion_point(field_set:TestMessage.enumValue)
}
inline ::TestMessage_TestEnum TestMessage::_internal_enumvalue() const {
  return static_cast<::TestMessage_TestEnum>(_impl_.enumvalue_);
}
inline void TestMessage::_internal_set_enumvalue(::TestMessage_TestEnum value) {
  ;
  _impl_.enumvalue_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestMap

// map<string, int32> data = 1;
inline int TestMap::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int TestMap::data_size() const {
  return _internal_data_size();
}
inline void TestMap::clear_data() {
  _impl_.data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
TestMap::_internal_data() const {
  return _impl_.data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >&
TestMap::data() const {
  // @@protoc_insertion_point(field_map:TestMap.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
TestMap::_internal_mutable_data() {
  return _impl_.data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >*
TestMap::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:TestMap.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// TestRepeated_TestMessage

// string strValue = 1;
inline void TestRepeated_TestMessage::clear_strvalue() {
  _impl_.strvalue_.ClearToEmpty();
}
inline const std::string& TestRepeated_TestMessage::strvalue() const {
  // @@protoc_insertion_point(field_get:TestRepeated.TestMessage.strValue)
  return _internal_strvalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestRepeated_TestMessage::set_strvalue(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.strvalue_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestRepeated.TestMessage.strValue)
}
inline std::string* TestRepeated_TestMessage::mutable_strvalue() {
  std::string* _s = _internal_mutable_strvalue();
  // @@protoc_insertion_point(field_mutable:TestRepeated.TestMessage.strValue)
  return _s;
}
inline const std::string& TestRepeated_TestMessage::_internal_strvalue() const {
  return _impl_.strvalue_.Get();
}
inline void TestRepeated_TestMessage::_internal_set_strvalue(const std::string& value) {
  ;


  _impl_.strvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* TestRepeated_TestMessage::_internal_mutable_strvalue() {
  ;
  return _impl_.strvalue_.Mutable( GetArenaForAllocation());
}
inline std::string* TestRepeated_TestMessage::release_strvalue() {
  // @@protoc_insertion_point(field_release:TestRepeated.TestMessage.strValue)
  return _impl_.strvalue_.Release();
}
inline void TestRepeated_TestMessage::set_allocated_strvalue(std::string* value) {
  _impl_.strvalue_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strvalue_.IsDefault()) {
          _impl_.strvalue_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TestRepeated.TestMessage.strValue)
}

// int32 intValue = 2;
inline void TestRepeated_TestMessage::clear_intvalue() {
  _impl_.intvalue_ = 0;
}
inline ::int32_t TestRepeated_TestMessage::intvalue() const {
  // @@protoc_insertion_point(field_get:TestRepeated.TestMessage.intValue)
  return _internal_intvalue();
}
inline void TestRepeated_TestMessage::set_intvalue(::int32_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:TestRepeated.TestMessage.intValue)
}
inline ::int32_t TestRepeated_TestMessage::_internal_intvalue() const {
  return _impl_.intvalue_;
}
inline void TestRepeated_TestMessage::_internal_set_intvalue(::int32_t value) {
  ;
  _impl_.intvalue_ = value;
}

// -------------------------------------------------------------------

// TestRepeated

// repeated .TestRepeated.TestMessage msg = 1;
inline int TestRepeated::_internal_msg_size() const {
  return _impl_.msg_.size();
}
inline int TestRepeated::msg_size() const {
  return _internal_msg_size();
}
inline void TestRepeated::clear_msg() {
  _internal_mutable_msg()->Clear();
}
inline ::TestRepeated_TestMessage* TestRepeated::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:TestRepeated.msg)
  return _internal_mutable_msg()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestRepeated_TestMessage >*
TestRepeated::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:TestRepeated.msg)
  return _internal_mutable_msg();
}
inline const ::TestRepeated_TestMessage& TestRepeated::_internal_msg(int index) const {
  return _internal_msg().Get(index);
}
inline const ::TestRepeated_TestMessage& TestRepeated::msg(int index) const {
  // @@protoc_insertion_point(field_get:TestRepeated.msg)
  return _internal_msg(index);
}
inline ::TestRepeated_TestMessage* TestRepeated::_internal_add_msg() {
  return _internal_mutable_msg()->Add();
}
inline ::TestRepeated_TestMessage* TestRepeated::add_msg() {
  ::TestRepeated_TestMessage* _add = _internal_add_msg();
  // @@protoc_insertion_point(field_add:TestRepeated.msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestRepeated_TestMessage >&
TestRepeated::msg() const {
  // @@protoc_insertion_point(field_list:TestRepeated.msg)
  return _internal_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::TestRepeated_TestMessage>&
TestRepeated::_internal_msg() const {
  return _impl_.msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::TestRepeated_TestMessage>*
TestRepeated::_internal_mutable_msg() {
  return &_impl_.msg_;
}

// -------------------------------------------------------------------

// ComplexMessage_NestedMessage

// string name = 1;
inline void ComplexMessage_NestedMessage::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ComplexMessage_NestedMessage::name() const {
  // @@protoc_insertion_point(field_get:ComplexMessage.NestedMessage.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexMessage_NestedMessage::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ComplexMessage.NestedMessage.name)
}
inline std::string* ComplexMessage_NestedMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ComplexMessage.NestedMessage.name)
  return _s;
}
inline const std::string& ComplexMessage_NestedMessage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ComplexMessage_NestedMessage::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexMessage_NestedMessage::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ComplexMessage_NestedMessage::release_name() {
  // @@protoc_insertion_point(field_release:ComplexMessage.NestedMessage.name)
  return _impl_.name_.Release();
}
inline void ComplexMessage_NestedMessage::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ComplexMessage.NestedMessage.name)
}

// repeated int32 value = 2;
inline int ComplexMessage_NestedMessage::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int ComplexMessage_NestedMessage::value_size() const {
  return _internal_value_size();
}
inline void ComplexMessage_NestedMessage::clear_value() {
  _internal_mutable_value()->Clear();
}
inline ::int32_t ComplexMessage_NestedMessage::value(int index) const {
  // @@protoc_insertion_point(field_get:ComplexMessage.NestedMessage.value)
  return _internal_value(index);
}
inline void ComplexMessage_NestedMessage::set_value(int index, ::int32_t value) {
  _internal_mutable_value()->Set(index, value);
  // @@protoc_insertion_point(field_set:ComplexMessage.NestedMessage.value)
}
inline void ComplexMessage_NestedMessage::add_value(::int32_t value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:ComplexMessage.NestedMessage.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ComplexMessage_NestedMessage::value() const {
  // @@protoc_insertion_point(field_list:ComplexMessage.NestedMessage.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ComplexMessage_NestedMessage::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:ComplexMessage.NestedMessage.value)
  return _internal_mutable_value();
}

inline ::int32_t ComplexMessage_NestedMessage::_internal_value(int index) const {
  return _internal_value().Get(index);
}
inline void ComplexMessage_NestedMessage::_internal_add_value(::int32_t value) {
  _internal_mutable_value()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ComplexMessage_NestedMessage::_internal_value() const {
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ComplexMessage_NestedMessage::_internal_mutable_value() {
  return &_impl_.value_;
}

// -------------------------------------------------------------------

// ComplexMessage_MapMessage

// int64 value = 1;
inline void ComplexMessage_MapMessage::clear_value() {
  _impl_.value_ = ::int64_t{0};
}
inline ::int64_t ComplexMessage_MapMessage::value() const {
  // @@protoc_insertion_point(field_get:ComplexMessage.MapMessage.value)
  return _internal_value();
}
inline void ComplexMessage_MapMessage::set_value(::int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ComplexMessage.MapMessage.value)
}
inline ::int64_t ComplexMessage_MapMessage::_internal_value() const {
  return _impl_.value_;
}
inline void ComplexMessage_MapMessage::_internal_set_value(::int64_t value) {
  ;
  _impl_.value_ = value;
}

// repeated string str = 2;
inline int ComplexMessage_MapMessage::_internal_str_size() const {
  return _impl_.str_.size();
}
inline int ComplexMessage_MapMessage::str_size() const {
  return _internal_str_size();
}
inline void ComplexMessage_MapMessage::clear_str() {
  _internal_mutable_str()->Clear();
}
inline std::string* ComplexMessage_MapMessage::add_str() {
  std::string* _s = _internal_add_str();
  // @@protoc_insertion_point(field_add_mutable:ComplexMessage.MapMessage.str)
  return _s;
}
inline const std::string& ComplexMessage_MapMessage::str(int index) const {
  // @@protoc_insertion_point(field_get:ComplexMessage.MapMessage.str)
  return _internal_str(index);
}
inline std::string* ComplexMessage_MapMessage::mutable_str(int index) {
  // @@protoc_insertion_point(field_mutable:ComplexMessage.MapMessage.str)
  return _internal_mutable_str()->Mutable(index);
}
inline void ComplexMessage_MapMessage::set_str(int index, const std::string& value) {
  _internal_mutable_str()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::set_str(int index, std::string&& value) {
  _internal_mutable_str()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::set_str(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_str()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::set_str(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_str()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::set_str(int index, absl::string_view value) {
  _internal_mutable_str()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::add_str(const std::string& value) {
  _internal_mutable_str()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::add_str(std::string&& value) {
  _internal_mutable_str()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::add_str(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_str()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::add_str(const char* value, std::size_t size) {
  _internal_mutable_str()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ComplexMessage.MapMessage.str)
}
inline void ComplexMessage_MapMessage::add_str(absl::string_view value) {
  _internal_mutable_str()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ComplexMessage.MapMessage.str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComplexMessage_MapMessage::str() const {
  // @@protoc_insertion_point(field_list:ComplexMessage.MapMessage.str)
  return _internal_str();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ComplexMessage_MapMessage::mutable_str() {
  // @@protoc_insertion_point(field_mutable_list:ComplexMessage.MapMessage.str)
  return _internal_mutable_str();
}
inline const std::string& ComplexMessage_MapMessage::_internal_str(int index) const {
  return _internal_str().Get(index);
}
inline std::string* ComplexMessage_MapMessage::_internal_add_str() {
  return _internal_mutable_str()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComplexMessage_MapMessage::_internal_str() const {
  return _impl_.str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComplexMessage_MapMessage::_internal_mutable_str() {
  return &_impl_.str_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComplexMessage

// repeated .ComplexMessage.NestedMessage msg = 1;
inline int ComplexMessage::_internal_msg_size() const {
  return _impl_.msg_.size();
}
inline int ComplexMessage::msg_size() const {
  return _internal_msg_size();
}
inline void ComplexMessage::clear_msg() {
  _internal_mutable_msg()->Clear();
}
inline ::ComplexMessage_NestedMessage* ComplexMessage::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ComplexMessage.msg)
  return _internal_mutable_msg()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ComplexMessage_NestedMessage >*
ComplexMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:ComplexMessage.msg)
  return _internal_mutable_msg();
}
inline const ::ComplexMessage_NestedMessage& ComplexMessage::_internal_msg(int index) const {
  return _internal_msg().Get(index);
}
inline const ::ComplexMessage_NestedMessage& ComplexMessage::msg(int index) const {
  // @@protoc_insertion_point(field_get:ComplexMessage.msg)
  return _internal_msg(index);
}
inline ::ComplexMessage_NestedMessage* ComplexMessage::_internal_add_msg() {
  return _internal_mutable_msg()->Add();
}
inline ::ComplexMessage_NestedMessage* ComplexMessage::add_msg() {
  ::ComplexMessage_NestedMessage* _add = _internal_add_msg();
  // @@protoc_insertion_point(field_add:ComplexMessage.msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ComplexMessage_NestedMessage >&
ComplexMessage::msg() const {
  // @@protoc_insertion_point(field_list:ComplexMessage.msg)
  return _internal_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ComplexMessage_NestedMessage>&
ComplexMessage::_internal_msg() const {
  return _impl_.msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ComplexMessage_NestedMessage>*
ComplexMessage::_internal_mutable_msg() {
  return &_impl_.msg_;
}

// map<string, .ComplexMessage.MapMessage> messageMap = 2;
inline int ComplexMessage::_internal_messagemap_size() const {
  return _impl_.messagemap_.size();
}
inline int ComplexMessage::messagemap_size() const {
  return _internal_messagemap_size();
}
inline void ComplexMessage::clear_messagemap() {
  _impl_.messagemap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >&
ComplexMessage::_internal_messagemap() const {
  return _impl_.messagemap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >&
ComplexMessage::messagemap() const {
  // @@protoc_insertion_point(field_map:ComplexMessage.messageMap)
  return _internal_messagemap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >*
ComplexMessage::_internal_mutable_messagemap() {
  return _impl_.messagemap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >*
ComplexMessage::mutable_messagemap() {
  // @@protoc_insertion_point(field_mutable_map:ComplexMessage.messageMap)
  return _internal_mutable_messagemap();
}

// repeated int32 values = 3;
inline int ComplexMessage::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int ComplexMessage::values_size() const {
  return _internal_values_size();
}
inline void ComplexMessage::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::int32_t ComplexMessage::values(int index) const {
  // @@protoc_insertion_point(field_get:ComplexMessage.values)
  return _internal_values(index);
}
inline void ComplexMessage::set_values(int index, ::int32_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:ComplexMessage.values)
}
inline void ComplexMessage::add_values(::int32_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:ComplexMessage.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ComplexMessage::values() const {
  // @@protoc_insertion_point(field_list:ComplexMessage.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ComplexMessage::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ComplexMessage.values)
  return _internal_mutable_values();
}

inline ::int32_t ComplexMessage::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline void ComplexMessage::_internal_add_values(::int32_t value) {
  _internal_mutable_values()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ComplexMessage::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ComplexMessage::_internal_mutable_values() {
  return &_impl_.values_;
}

// string str = 4;
inline void ComplexMessage::clear_str() {
  _impl_.str_.ClearToEmpty();
}
inline const std::string& ComplexMessage::str() const {
  // @@protoc_insertion_point(field_get:ComplexMessage.str)
  return _internal_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexMessage::set_str(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ComplexMessage.str)
}
inline std::string* ComplexMessage::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:ComplexMessage.str)
  return _s;
}
inline const std::string& ComplexMessage::_internal_str() const {
  return _impl_.str_.Get();
}
inline void ComplexMessage::_internal_set_str(const std::string& value) {
  ;


  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexMessage::_internal_mutable_str() {
  ;
  return _impl_.str_.Mutable( GetArenaForAllocation());
}
inline std::string* ComplexMessage::release_str() {
  // @@protoc_insertion_point(field_release:ComplexMessage.str)
  return _impl_.str_.Release();
}
inline void ComplexMessage::set_allocated_str(std::string* value) {
  _impl_.str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.str_.IsDefault()) {
          _impl_.str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ComplexMessage.str)
}

// int32 numValue = 5;
inline void ComplexMessage::clear_numvalue() {
  _impl_.numvalue_ = 0;
}
inline ::int32_t ComplexMessage::numvalue() const {
  // @@protoc_insertion_point(field_get:ComplexMessage.numValue)
  return _internal_numvalue();
}
inline void ComplexMessage::set_numvalue(::int32_t value) {
  _internal_set_numvalue(value);
  // @@protoc_insertion_point(field_set:ComplexMessage.numValue)
}
inline ::int32_t ComplexMessage::_internal_numvalue() const {
  return _impl_.numvalue_;
}
inline void ComplexMessage::_internal_set_numvalue(::int32_t value) {
  ;
  _impl_.numvalue_ = value;
}

// -------------------------------------------------------------------

// TestKeyMessage

// int32 index = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
inline void TestKeyMessage::clear_index() {
  _impl_.index_ = 0;
}
inline ::int32_t TestKeyMessage::index() const {
  // @@protoc_insertion_point(field_get:TestKeyMessage.index)
  return _internal_index();
}
inline void TestKeyMessage::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TestKeyMessage.index)
}
inline ::int32_t TestKeyMessage::_internal_index() const {
  return _impl_.index_;
}
inline void TestKeyMessage::_internal_set_index(::int32_t value) {
  ;
  _impl_.index_ = value;
}

// repeated int64 numValues = 3;
inline int TestKeyMessage::_internal_numvalues_size() const {
  return _impl_.numvalues_.size();
}
inline int TestKeyMessage::numvalues_size() const {
  return _internal_numvalues_size();
}
inline void TestKeyMessage::clear_numvalues() {
  _internal_mutable_numvalues()->Clear();
}
inline ::int64_t TestKeyMessage::numvalues(int index) const {
  // @@protoc_insertion_point(field_get:TestKeyMessage.numValues)
  return _internal_numvalues(index);
}
inline void TestKeyMessage::set_numvalues(int index, ::int64_t value) {
  _internal_mutable_numvalues()->Set(index, value);
  // @@protoc_insertion_point(field_set:TestKeyMessage.numValues)
}
inline void TestKeyMessage::add_numvalues(::int64_t value) {
  _internal_add_numvalues(value);
  // @@protoc_insertion_point(field_add:TestKeyMessage.numValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& TestKeyMessage::numvalues() const {
  // @@protoc_insertion_point(field_list:TestKeyMessage.numValues)
  return _internal_numvalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* TestKeyMessage::mutable_numvalues() {
  // @@protoc_insertion_point(field_mutable_list:TestKeyMessage.numValues)
  return _internal_mutable_numvalues();
}

inline ::int64_t TestKeyMessage::_internal_numvalues(int index) const {
  return _internal_numvalues().Get(index);
}
inline void TestKeyMessage::_internal_add_numvalues(::int64_t value) {
  _internal_mutable_numvalues()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& TestKeyMessage::_internal_numvalues() const {
  return _impl_.numvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* TestKeyMessage::_internal_mutable_numvalues() {
  return &_impl_.numvalues_;
}

// string data = 4;
inline void TestKeyMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TestKeyMessage::data() const {
  // @@protoc_insertion_point(field_get:TestKeyMessage.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestKeyMessage::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestKeyMessage.data)
}
inline std::string* TestKeyMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:TestKeyMessage.data)
  return _s;
}
inline const std::string& TestKeyMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void TestKeyMessage::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* TestKeyMessage::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* TestKeyMessage::release_data() {
  // @@protoc_insertion_point(field_release:TestKeyMessage.data)
  return _impl_.data_.Release();
}
inline void TestKeyMessage::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TestKeyMessage.data)
}

// -------------------------------------------------------------------

// StringKeyMessage

// string name = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
inline void StringKeyMessage::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StringKeyMessage::name() const {
  // @@protoc_insertion_point(field_get:StringKeyMessage.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StringKeyMessage::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StringKeyMessage.name)
}
inline std::string* StringKeyMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:StringKeyMessage.name)
  return _s;
}
inline const std::string& StringKeyMessage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StringKeyMessage::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StringKeyMessage::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* StringKeyMessage::release_name() {
  // @@protoc_insertion_point(field_release:StringKeyMessage.name)
  return _impl_.name_.Release();
}
inline void StringKeyMessage::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StringKeyMessage.name)
}

// uint64 number = 2;
inline void StringKeyMessage::clear_number() {
  _impl_.number_ = ::uint64_t{0u};
}
inline ::uint64_t StringKeyMessage::number() const {
  // @@protoc_insertion_point(field_get:StringKeyMessage.number)
  return _internal_number();
}
inline void StringKeyMessage::set_number(::uint64_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:StringKeyMessage.number)
}
inline ::uint64_t StringKeyMessage::_internal_number() const {
  return _impl_.number_;
}
inline void StringKeyMessage::_internal_set_number(::uint64_t value) {
  ;
  _impl_.number_ = value;
}

// float floatNumber = 3;
inline void StringKeyMessage::clear_floatnumber() {
  _impl_.floatnumber_ = 0;
}
inline float StringKeyMessage::floatnumber() const {
  // @@protoc_insertion_point(field_get:StringKeyMessage.floatNumber)
  return _internal_floatnumber();
}
inline void StringKeyMessage::set_floatnumber(float value) {
  _internal_set_floatnumber(value);
  // @@protoc_insertion_point(field_set:StringKeyMessage.floatNumber)
}
inline float StringKeyMessage::_internal_floatnumber() const {
  return _impl_.floatnumber_;
}
inline void StringKeyMessage::_internal_set_floatnumber(float value) {
  ;
  _impl_.floatnumber_ = value;
}

// -------------------------------------------------------------------

// ComplexKeyTestMessage_Position

// int32 x = 1;
inline void ComplexKeyTestMessage_Position::clear_x() {
  _impl_.x_ = 0;
}
inline ::int32_t ComplexKeyTestMessage_Position::x() const {
  // @@protoc_insertion_point(field_get:ComplexKeyTestMessage.Position.x)
  return _internal_x();
}
inline void ComplexKeyTestMessage_Position::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ComplexKeyTestMessage.Position.x)
}
inline ::int32_t ComplexKeyTestMessage_Position::_internal_x() const {
  return _impl_.x_;
}
inline void ComplexKeyTestMessage_Position::_internal_set_x(::int32_t value) {
  ;
  _impl_.x_ = value;
}

// int32 y = 2;
inline void ComplexKeyTestMessage_Position::clear_y() {
  _impl_.y_ = 0;
}
inline ::int32_t ComplexKeyTestMessage_Position::y() const {
  // @@protoc_insertion_point(field_get:ComplexKeyTestMessage.Position.y)
  return _internal_y();
}
inline void ComplexKeyTestMessage_Position::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ComplexKeyTestMessage.Position.y)
}
inline ::int32_t ComplexKeyTestMessage_Position::_internal_y() const {
  return _impl_.y_;
}
inline void ComplexKeyTestMessage_Position::_internal_set_y(::int32_t value) {
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// ComplexKeyTestMessage

// .ComplexKeyTestMessage.Position pos = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
inline bool ComplexKeyTestMessage::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline void ComplexKeyTestMessage::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ComplexKeyTestMessage_Position& ComplexKeyTestMessage::_internal_pos() const {
  const ::ComplexKeyTestMessage_Position* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::ComplexKeyTestMessage_Position&>(
      ::_ComplexKeyTestMessage_Position_default_instance_);
}
inline const ::ComplexKeyTestMessage_Position& ComplexKeyTestMessage::pos() const {
  // @@protoc_insertion_point(field_get:ComplexKeyTestMessage.pos)
  return _internal_pos();
}
inline void ComplexKeyTestMessage::unsafe_arena_set_allocated_pos(
    ::ComplexKeyTestMessage_Position* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ComplexKeyTestMessage.pos)
}
inline ::ComplexKeyTestMessage_Position* ComplexKeyTestMessage::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ComplexKeyTestMessage_Position* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ComplexKeyTestMessage_Position* ComplexKeyTestMessage::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:ComplexKeyTestMessage.pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ComplexKeyTestMessage_Position* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::ComplexKeyTestMessage_Position* ComplexKeyTestMessage::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ComplexKeyTestMessage_Position>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::ComplexKeyTestMessage_Position* ComplexKeyTestMessage::mutable_pos() {
  ::ComplexKeyTestMessage_Position* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:ComplexKeyTestMessage.pos)
  return _msg;
}
inline void ComplexKeyTestMessage::set_allocated_pos(::ComplexKeyTestMessage_Position* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ComplexKeyTestMessage.pos)
}

// string data = 2;
inline void ComplexKeyTestMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ComplexKeyTestMessage::data() const {
  // @@protoc_insertion_point(field_get:ComplexKeyTestMessage.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexKeyTestMessage::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ComplexKeyTestMessage.data)
}
inline std::string* ComplexKeyTestMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ComplexKeyTestMessage.data)
  return _s;
}
inline const std::string& ComplexKeyTestMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ComplexKeyTestMessage::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexKeyTestMessage::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ComplexKeyTestMessage::release_data() {
  // @@protoc_insertion_point(field_release:ComplexKeyTestMessage.data)
  return _impl_.data_.Release();
}
inline void ComplexKeyTestMessage::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ComplexKeyTestMessage.data)
}

// repeated int64 numValues = 3;
inline int ComplexKeyTestMessage::_internal_numvalues_size() const {
  return _impl_.numvalues_.size();
}
inline int ComplexKeyTestMessage::numvalues_size() const {
  return _internal_numvalues_size();
}
inline void ComplexKeyTestMessage::clear_numvalues() {
  _internal_mutable_numvalues()->Clear();
}
inline ::int64_t ComplexKeyTestMessage::numvalues(int index) const {
  // @@protoc_insertion_point(field_get:ComplexKeyTestMessage.numValues)
  return _internal_numvalues(index);
}
inline void ComplexKeyTestMessage::set_numvalues(int index, ::int64_t value) {
  _internal_mutable_numvalues()->Set(index, value);
  // @@protoc_insertion_point(field_set:ComplexKeyTestMessage.numValues)
}
inline void ComplexKeyTestMessage::add_numvalues(::int64_t value) {
  _internal_add_numvalues(value);
  // @@protoc_insertion_point(field_add:ComplexKeyTestMessage.numValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& ComplexKeyTestMessage::numvalues() const {
  // @@protoc_insertion_point(field_list:ComplexKeyTestMessage.numValues)
  return _internal_numvalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* ComplexKeyTestMessage::mutable_numvalues() {
  // @@protoc_insertion_point(field_mutable_list:ComplexKeyTestMessage.numValues)
  return _internal_mutable_numvalues();
}

inline ::int64_t ComplexKeyTestMessage::_internal_numvalues(int index) const {
  return _internal_numvalues().Get(index);
}
inline void ComplexKeyTestMessage::_internal_add_numvalues(::int64_t value) {
  _internal_mutable_numvalues()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& ComplexKeyTestMessage::_internal_numvalues() const {
  return _impl_.numvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* ComplexKeyTestMessage::_internal_mutable_numvalues() {
  return &_impl_.numvalues_;
}

// .ComplexKeyTestMessage.TestEnum enumValue = 4;
inline void ComplexKeyTestMessage::clear_enumvalue() {
  _impl_.enumvalue_ = 0;
}
inline ::ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::enumvalue() const {
  // @@protoc_insertion_point(field_get:ComplexKeyTestMessage.enumValue)
  return _internal_enumvalue();
}
inline void ComplexKeyTestMessage::set_enumvalue(::ComplexKeyTestMessage_TestEnum value) {
   _internal_set_enumvalue(value);
  // @@protoc_insertion_point(field_set:ComplexKeyTestMessage.enumValue)
}
inline ::ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::_internal_enumvalue() const {
  return static_cast<::ComplexKeyTestMessage_TestEnum>(_impl_.enumvalue_);
}
inline void ComplexKeyTestMessage::_internal_set_enumvalue(::ComplexKeyTestMessage_TestEnum value) {
  ;
  _impl_.enumvalue_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::TestMessage_TestEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TestMessage_TestEnum>() {
  return ::TestMessage_TestEnum_descriptor();
}
template <>
struct is_proto_enum<::ComplexKeyTestMessage_TestEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ComplexKeyTestMessage_TestEnum>() {
  return ::ComplexKeyTestMessage_TestEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
