// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR TestMessage_TestNestedMessage::TestMessage_TestNestedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMessage_TestNestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessage_TestNestedMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessage_TestNestedMessageDefaultTypeInternal() {}
  union {
    TestMessage_TestNestedMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessage_TestNestedMessageDefaultTypeInternal _TestMessage_TestNestedMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestMessage::TestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stringvalue_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.nestedmessage_)*/nullptr
  , /*decltype(_impl_.value_)*/ 0

  , /*decltype(_impl_.enumvalue_)*/ 0
} {}
struct TestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageDefaultTypeInternal() {}
  union {
    TestMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageDefaultTypeInternal _TestMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestMap_DataEntry_DoNotUse::TestMap_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestMap_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMap_DataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMap_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMap_DataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMap_DataEntry_DoNotUseDefaultTypeInternal _TestMap_DataEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestMap::TestMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapDefaultTypeInternal() {}
  union {
    TestMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapDefaultTypeInternal _TestMap_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestRepeated_TestMessage::TestRepeated_TestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.strvalue_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.intvalue_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestRepeated_TestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepeated_TestMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepeated_TestMessageDefaultTypeInternal() {}
  union {
    TestRepeated_TestMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepeated_TestMessageDefaultTypeInternal _TestRepeated_TestMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestRepeated::TestRepeated(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestRepeatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepeatedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepeatedDefaultTypeInternal() {}
  union {
    TestRepeated _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepeatedDefaultTypeInternal _TestRepeated_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexMessage_NestedMessage::ComplexMessage_NestedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/ {}
  ,/* _impl_._value_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexMessage_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexMessage_NestedMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexMessage_NestedMessageDefaultTypeInternal() {}
  union {
    ComplexMessage_NestedMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexMessage_NestedMessageDefaultTypeInternal _ComplexMessage_NestedMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexMessage_MapMessage::ComplexMessage_MapMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_)*/{}
  , /*decltype(_impl_.value_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexMessage_MapMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexMessage_MapMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexMessage_MapMessageDefaultTypeInternal() {}
  union {
    ComplexMessage_MapMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexMessage_MapMessageDefaultTypeInternal _ComplexMessage_MapMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexMessage_MessageMapEntry_DoNotUse::ComplexMessage_MessageMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ComplexMessage_MessageMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexMessage_MessageMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexMessage_MessageMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComplexMessage_MessageMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexMessage_MessageMapEntry_DoNotUseDefaultTypeInternal _ComplexMessage_MessageMapEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexMessage::ComplexMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_.messagemap_)*/{}
  , /*decltype(_impl_.values_)*/ {}
  ,/* _impl_._values_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.str_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.numvalue_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexMessageDefaultTypeInternal() {}
  union {
    ComplexMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexMessageDefaultTypeInternal _ComplexMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestKeyMessage::TestKeyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.numvalues_)*/ {}
  ,/* _impl_._numvalues_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestKeyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestKeyMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestKeyMessageDefaultTypeInternal() {}
  union {
    TestKeyMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestKeyMessageDefaultTypeInternal _TestKeyMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StringKeyMessage::StringKeyMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.floatnumber_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringKeyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringKeyMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringKeyMessageDefaultTypeInternal() {}
  union {
    StringKeyMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringKeyMessageDefaultTypeInternal _StringKeyMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexKeyTestMessage_Position::ComplexKeyTestMessage_Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexKeyTestMessage_PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexKeyTestMessage_PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexKeyTestMessage_PositionDefaultTypeInternal() {}
  union {
    ComplexKeyTestMessage_Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexKeyTestMessage_PositionDefaultTypeInternal _ComplexKeyTestMessage_Position_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ComplexKeyTestMessage::ComplexKeyTestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.numvalues_)*/ {}
  ,/* _impl_._numvalues_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.enumvalue_)*/ 0
} {}
struct ComplexKeyTestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexKeyTestMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexKeyTestMessageDefaultTypeInternal() {}
  union {
    ComplexKeyTestMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexKeyTestMessageDefaultTypeInternal _ComplexKeyTestMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_messages_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_messages_2eproto = nullptr;
const ::uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TestMessage_TestNestedMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TestMessage_TestNestedMessage, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::TestMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::TestMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TestMessage, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::TestMessage, _impl_.stringvalue_),
    PROTOBUF_FIELD_OFFSET(::TestMessage, _impl_.nestedmessage_),
    PROTOBUF_FIELD_OFFSET(::TestMessage, _impl_.enumvalue_),
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::TestMap_DataEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::TestMap_DataEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TestMap_DataEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::TestMap_DataEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TestMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TestMap, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TestRepeated_TestMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TestRepeated_TestMessage, _impl_.strvalue_),
    PROTOBUF_FIELD_OFFSET(::TestRepeated_TestMessage, _impl_.intvalue_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TestRepeated, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TestRepeated, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_NestedMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_NestedMessage, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_NestedMessage, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_MapMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_MapMessage, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_MapMessage, _impl_.str_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_MessageMapEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_MessageMapEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_MessageMapEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage_MessageMapEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ComplexMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ComplexMessage, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage, _impl_.messagemap_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage, _impl_.values_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage, _impl_.str_),
    PROTOBUF_FIELD_OFFSET(::ComplexMessage, _impl_.numvalue_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::TestKeyMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::TestKeyMessage, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::TestKeyMessage, _impl_.numvalues_),
    PROTOBUF_FIELD_OFFSET(::TestKeyMessage, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::StringKeyMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::StringKeyMessage, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::StringKeyMessage, _impl_.number_),
    PROTOBUF_FIELD_OFFSET(::StringKeyMessage, _impl_.floatnumber_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage_Position, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage_Position, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage_Position, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage, _impl_.pos_),
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage, _impl_.numvalues_),
    PROTOBUF_FIELD_OFFSET(::ComplexKeyTestMessage, _impl_.enumvalue_),
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::TestMessage_TestNestedMessage)},
        { 9, 21, -1, sizeof(::TestMessage)},
        { 25, 35, -1, sizeof(::TestMap_DataEntry_DoNotUse)},
        { 37, -1, -1, sizeof(::TestMap)},
        { 46, -1, -1, sizeof(::TestRepeated_TestMessage)},
        { 56, -1, -1, sizeof(::TestRepeated)},
        { 65, -1, -1, sizeof(::ComplexMessage_NestedMessage)},
        { 75, -1, -1, sizeof(::ComplexMessage_MapMessage)},
        { 85, 95, -1, sizeof(::ComplexMessage_MessageMapEntry_DoNotUse)},
        { 97, -1, -1, sizeof(::ComplexMessage)},
        { 110, -1, -1, sizeof(::TestKeyMessage)},
        { 121, -1, -1, sizeof(::StringKeyMessage)},
        { 132, -1, -1, sizeof(::ComplexKeyTestMessage_Position)},
        { 142, 154, -1, sizeof(::ComplexKeyTestMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_TestMessage_TestNestedMessage_default_instance_._instance,
    &::_TestMessage_default_instance_._instance,
    &::_TestMap_DataEntry_DoNotUse_default_instance_._instance,
    &::_TestMap_default_instance_._instance,
    &::_TestRepeated_TestMessage_default_instance_._instance,
    &::_TestRepeated_default_instance_._instance,
    &::_ComplexMessage_NestedMessage_default_instance_._instance,
    &::_ComplexMessage_MapMessage_default_instance_._instance,
    &::_ComplexMessage_MessageMapEntry_DoNotUse_default_instance_._instance,
    &::_ComplexMessage_default_instance_._instance,
    &::_TestKeyMessage_default_instance_._instance,
    &::_StringKeyMessage_default_instance_._instance,
    &::_ComplexKeyTestMessage_Position_default_instance_._instance,
    &::_ComplexKeyTestMessage_default_instance_._instance,
};
const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016messages.proto\032\025proto/KeyOption.proto\""
    "\352\001\n\013TestMessage\022\r\n\005value\030\001 \001(\005\022\023\n\013string"
    "Value\030\002 \001(\t\0225\n\rnestedMessage\030\003 \001(\0132\036.Tes"
    "tMessage.TestNestedMessage\022(\n\tenumValue\030"
    "\004 \001(\0162\025.TestMessage.TestEnum\032\"\n\021TestNest"
    "edMessage\022\r\n\005value\030\001 \001(\005\"2\n\010TestEnum\022\010\n\004"
    "val0\020\000\022\010\n\004val1\020\001\022\010\n\004val2\020\002\022\010\n\004val3\020\003\"X\n\007"
    "TestMap\022 \n\004data\030\001 \003(\0132\022.TestMap.DataEntr"
    "y\032+\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
    "(\005:\0028\001\"i\n\014TestRepeated\022&\n\003msg\030\001 \003(\0132\031.Te"
    "stRepeated.TestMessage\0321\n\013TestMessage\022\020\n"
    "\010strValue\030\001 \001(\t\022\020\n\010intValue\030\002 \001(\005\"\307\002\n\016Co"
    "mplexMessage\022*\n\003msg\030\001 \003(\0132\035.ComplexMessa"
    "ge.NestedMessage\0223\n\nmessageMap\030\002 \003(\0132\037.C"
    "omplexMessage.MessageMapEntry\022\016\n\006values\030"
    "\003 \003(\005\022\013\n\003str\030\004 \001(\t\022\020\n\010numValue\030\005 \001(\005\032,\n\r"
    "NestedMessage\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \003"
    "(\005\032(\n\nMapMessage\022\r\n\005value\030\001 \001(\003\022\013\n\003str\030\002"
    " \003(\t\032M\n\017MessageMapEntry\022\013\n\003key\030\001 \001(\t\022)\n\005"
    "value\030\002 \001(\0132\032.ComplexMessage.MapMessage:"
    "\0028\001\"F\n\016TestKeyMessage\022\023\n\005index\030\001 \001(\005B\004\250\273"
    "\030\001\022\021\n\tnumValues\030\003 \003(\003\022\014\n\004data\030\004 \001(\t\"K\n\020S"
    "tringKeyMessage\022\022\n\004name\030\001 \001(\tB\004\250\273\030\001\022\016\n\006n"
    "umber\030\002 \001(\004\022\023\n\013floatNumber\030\003 \001(\002\"\374\001\n\025Com"
    "plexKeyTestMessage\0222\n\003pos\030\001 \001(\0132\037.Comple"
    "xKeyTestMessage.PositionB\004\250\273\030\001\022\014\n\004data\030\002"
    " \001(\t\022\021\n\tnumValues\030\003 \003(\003\0222\n\tenumValue\030\004 \001"
    "(\0162\037.ComplexKeyTestMessage.TestEnum\032&\n\010P"
    "osition\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005:\004\260\273\030\001\"2\n\010T"
    "estEnum\022\010\n\004val0\020\000\022\010\n\004val1\020\001\022\010\n\004val2\020\002\022\010\n"
    "\004val3\020\003b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_messages_2eproto_deps[1] =
    {
        &::descriptor_table_proto_2fKeyOption_2eproto,
};
static ::absl::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false,
    false,
    1215,
    descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once,
    descriptor_table_messages_2eproto_deps,
    1,
    14,
    schemas,
    file_default_instances,
    TableStruct_messages_2eproto::offsets,
    file_level_metadata_messages_2eproto,
    file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestMessage_TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool TestMessage_TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TestMessage_TestEnum TestMessage::val0;
constexpr TestMessage_TestEnum TestMessage::val1;
constexpr TestMessage_TestEnum TestMessage::val2;
constexpr TestMessage_TestEnum TestMessage::val3;
constexpr TestMessage_TestEnum TestMessage::TestEnum_MIN;
constexpr TestMessage_TestEnum TestMessage::TestEnum_MAX;
constexpr int TestMessage::TestEnum_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComplexKeyTestMessage_TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool ComplexKeyTestMessage_TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::val0;
constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::val1;
constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::val2;
constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::val3;
constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::TestEnum_MIN;
constexpr ComplexKeyTestMessage_TestEnum ComplexKeyTestMessage::TestEnum_MAX;
constexpr int ComplexKeyTestMessage::TestEnum_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TestMessage_TestNestedMessage::_Internal {
 public:
};

TestMessage_TestNestedMessage::TestMessage_TestNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMessage.TestNestedMessage)
}
TestMessage_TestNestedMessage::TestMessage_TestNestedMessage(const TestMessage_TestNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TestMessage.TestNestedMessage)
}

inline void TestMessage_TestNestedMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestMessage_TestNestedMessage::~TestMessage_TestNestedMessage() {
  // @@protoc_insertion_point(destructor:TestMessage.TestNestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessage_TestNestedMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMessage_TestNestedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMessage_TestNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMessage.TestNestedMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage_TestNestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestMessage_TestNestedMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestMessage.TestNestedMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestMessage.TestNestedMessage)
  return target;
}

::size_t TestMessage_TestNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestMessage.TestNestedMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage_TestNestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMessage_TestNestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage_TestNestedMessage::GetClassData() const { return &_class_data_; }


void TestMessage_TestNestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMessage_TestNestedMessage*>(&to_msg);
  auto& from = static_cast<const TestMessage_TestNestedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMessage.TestNestedMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage_TestNestedMessage::CopyFrom(const TestMessage_TestNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMessage.TestNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage_TestNestedMessage::IsInitialized() const {
  return true;
}

void TestMessage_TestNestedMessage::InternalSwap(TestMessage_TestNestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage_TestNestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}
// ===================================================================

class TestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestMessage, _impl_._has_bits_);
  static const ::TestMessage_TestNestedMessage& nestedmessage(const TestMessage* msg);
  static void set_has_nestedmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TestMessage_TestNestedMessage&
TestMessage::_Internal::nestedmessage(const TestMessage* msg) {
  return *msg->_impl_.nestedmessage_;
}
TestMessage::TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stringvalue_) {}

    , decltype(_impl_.nestedmessage_){nullptr}
    , decltype(_impl_.value_) {}

    , decltype(_impl_.enumvalue_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stringvalue().empty()) {
    _this->_impl_.stringvalue_.Set(from._internal_stringvalue(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.nestedmessage_ = new ::TestMessage_TestNestedMessage(*from._impl_.nestedmessage_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.enumvalue_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.enumvalue_));
  // @@protoc_insertion_point(copy_constructor:TestMessage)
}

inline void TestMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stringvalue_) {}

    , decltype(_impl_.nestedmessage_){nullptr}
    , decltype(_impl_.value_) { 0 }

    , decltype(_impl_.enumvalue_) { 0 }

  };
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:TestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stringvalue_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nestedmessage_;
}

void TestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stringvalue_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.nestedmessage_ != nullptr);
    _impl_.nestedmessage_->Clear();
  }
  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enumvalue_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.enumvalue_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string stringValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestMessage.stringValue"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .TestMessage.TestNestedMessage nestedMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nestedmessage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .TestMessage.TestEnum enumValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_enumvalue(static_cast<::TestMessage_TestEnum>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_value(), target);
  }

  // string stringValue = 2;
  if (!this->_internal_stringvalue().empty()) {
    const std::string& _s = this->_internal_stringvalue();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "TestMessage.stringValue");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .TestMessage.TestNestedMessage nestedMessage = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nestedmessage(this),
        _Internal::nestedmessage(this).GetCachedSize(), target, stream);
  }

  // .TestMessage.TestEnum enumValue = 4;
  if (this->_internal_enumvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_enumvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestMessage)
  return target;
}

::size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stringValue = 2;
  if (!this->_internal_stringvalue().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_stringvalue());
  }

  // .TestMessage.TestNestedMessage nestedMessage = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nestedmessage_);
  }

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // .TestMessage.TestEnum enumValue = 4;
  if (this->_internal_enumvalue() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_enumvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessage::GetClassData() const { return &_class_data_; }


void TestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMessage*>(&to_msg);
  auto& from = static_cast<const TestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stringvalue().empty()) {
    _this->_internal_set_stringvalue(from._internal_stringvalue());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_nestedmessage()->::TestMessage_TestNestedMessage::MergeFrom(
        from._internal_nestedmessage());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_enumvalue() != 0) {
    _this->_internal_set_enumvalue(from._internal_enumvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  return true;
}

void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stringvalue_, lhs_arena,
                                       &other->_impl_.stringvalue_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.enumvalue_)
      + sizeof(TestMessage::_impl_.enumvalue_)
      - PROTOBUF_FIELD_OFFSET(TestMessage, _impl_.nestedmessage_)>(
          reinterpret_cast<char*>(&_impl_.nestedmessage_),
          reinterpret_cast<char*>(&other->_impl_.nestedmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}
// ===================================================================

TestMap_DataEntry_DoNotUse::TestMap_DataEntry_DoNotUse() {}
TestMap_DataEntry_DoNotUse::TestMap_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMap_DataEntry_DoNotUse::MergeFrom(const TestMap_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMap_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}
// ===================================================================

class TestMap::_Internal {
 public:
};

TestMap::TestMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMap)
}
TestMap::TestMap(const TestMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  // @@protoc_insertion_point(copy_constructor:TestMap)
}

inline void TestMap::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestMap::~TestMap() {
  // @@protoc_insertion_point(destructor:TestMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMap::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~MapField();
}

void TestMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMap)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestMap::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestMap)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> data = 1;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<std::string, ::int32_t>;
    using WireHelper = TestMap_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "TestMap.data");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestMap)
  return target;
}

::size_t TestMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::int32_t >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += TestMap_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMap::GetClassData() const { return &_class_data_; }


void TestMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestMap*>(&to_msg);
  auto& from = static_cast<const TestMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMap::CopyFrom(const TestMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMap::IsInitialized() const {
  return true;
}

void TestMap::InternalSwap(TestMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}
// ===================================================================

class TestRepeated_TestMessage::_Internal {
 public:
};

TestRepeated_TestMessage::TestRepeated_TestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestRepeated.TestMessage)
}
TestRepeated_TestMessage::TestRepeated_TestMessage(const TestRepeated_TestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRepeated_TestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strvalue_) {}

    , decltype(_impl_.intvalue_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.strvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strvalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strvalue().empty()) {
    _this->_impl_.strvalue_.Set(from._internal_strvalue(), _this->GetArenaForAllocation());
  }
  _this->_impl_.intvalue_ = from._impl_.intvalue_;
  // @@protoc_insertion_point(copy_constructor:TestRepeated.TestMessage)
}

inline void TestRepeated_TestMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.strvalue_) {}

    , decltype(_impl_.intvalue_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.strvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strvalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestRepeated_TestMessage::~TestRepeated_TestMessage() {
  // @@protoc_insertion_point(destructor:TestRepeated.TestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRepeated_TestMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strvalue_.Destroy();
}

void TestRepeated_TestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRepeated_TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TestRepeated.TestMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strvalue_.ClearToEmpty();
  _impl_.intvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepeated_TestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestRepeated.TestMessage.strValue"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 intValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.intvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestRepeated_TestMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestRepeated.TestMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string strValue = 1;
  if (!this->_internal_strvalue().empty()) {
    const std::string& _s = this->_internal_strvalue();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "TestRepeated.TestMessage.strValue");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 intValue = 2;
  if (this->_internal_intvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_intvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestRepeated.TestMessage)
  return target;
}

::size_t TestRepeated_TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestRepeated.TestMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strValue = 1;
  if (!this->_internal_strvalue().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_strvalue());
  }

  // int32 intValue = 2;
  if (this->_internal_intvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_intvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepeated_TestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRepeated_TestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepeated_TestMessage::GetClassData() const { return &_class_data_; }


void TestRepeated_TestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRepeated_TestMessage*>(&to_msg);
  auto& from = static_cast<const TestRepeated_TestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestRepeated.TestMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strvalue().empty()) {
    _this->_internal_set_strvalue(from._internal_strvalue());
  }
  if (from._internal_intvalue() != 0) {
    _this->_internal_set_intvalue(from._internal_intvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepeated_TestMessage::CopyFrom(const TestRepeated_TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestRepeated.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepeated_TestMessage::IsInitialized() const {
  return true;
}

void TestRepeated_TestMessage::InternalSwap(TestRepeated_TestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strvalue_, lhs_arena,
                                       &other->_impl_.strvalue_, rhs_arena);

  swap(_impl_.intvalue_, other->_impl_.intvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepeated_TestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}
// ===================================================================

class TestRepeated::_Internal {
 public:
};

TestRepeated::TestRepeated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestRepeated)
}
TestRepeated::TestRepeated(const TestRepeated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRepeated* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){from._impl_.msg_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TestRepeated)
}

inline void TestRepeated::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestRepeated::~TestRepeated() {
  // @@protoc_insertion_point(destructor:TestRepeated)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRepeated::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_msg()->~RepeatedPtrField();
}

void TestRepeated::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRepeated::Clear() {
// @@protoc_insertion_point(message_clear_start:TestRepeated)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_msg()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepeated::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TestRepeated.TestMessage msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestRepeated::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestRepeated)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TestRepeated.TestMessage msg = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestRepeated)
  return target;
}

::size_t TestRepeated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestRepeated)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TestRepeated.TestMessage msg = 1;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->_internal_msg()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepeated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRepeated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepeated::GetClassData() const { return &_class_data_; }


void TestRepeated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRepeated*>(&to_msg);
  auto& from = static_cast<const TestRepeated&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestRepeated)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_msg()->MergeFrom(from._internal_msg());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepeated::CopyFrom(const TestRepeated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestRepeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepeated::IsInitialized() const {
  return true;
}

void TestRepeated::InternalSwap(TestRepeated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_msg()->InternalSwap(other->_internal_mutable_msg());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepeated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}
// ===================================================================

class ComplexMessage_NestedMessage::_Internal {
 public:
};

ComplexMessage_NestedMessage::ComplexMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ComplexMessage.NestedMessage)
}
ComplexMessage_NestedMessage::ComplexMessage_NestedMessage(const ComplexMessage_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexMessage_NestedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_) { from._impl_.value_ }
    ,/* _impl_._value_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ComplexMessage.NestedMessage)
}

inline void ComplexMessage_NestedMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_) { arena }
    ,/* _impl_._value_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexMessage_NestedMessage::~ComplexMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:ComplexMessage.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexMessage_NestedMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
  _impl_.name_.Destroy();
}

void ComplexMessage_NestedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ComplexMessage.NestedMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_value()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexMessage_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ComplexMessage.NestedMessage.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComplexMessage_NestedMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComplexMessage.NestedMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ComplexMessage.NestedMessage.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated int32 value = 2;
  {
    int byte_size = _impl_._value_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(2, _internal_value(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComplexMessage.NestedMessage)
  return target;
}

::size_t ComplexMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComplexMessage.NestedMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_value())
    ;
    _impl_._value_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexMessage_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexMessage_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexMessage_NestedMessage::GetClassData() const { return &_class_data_; }


void ComplexMessage_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexMessage_NestedMessage*>(&to_msg);
  auto& from = static_cast<const ComplexMessage_NestedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ComplexMessage.NestedMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexMessage_NestedMessage::CopyFrom(const ComplexMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComplexMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage_NestedMessage::IsInitialized() const {
  return true;
}

void ComplexMessage_NestedMessage::InternalSwap(ComplexMessage_NestedMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexMessage_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}
// ===================================================================

class ComplexMessage_MapMessage::_Internal {
 public:
};

ComplexMessage_MapMessage::ComplexMessage_MapMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ComplexMessage.MapMessage)
}
ComplexMessage_MapMessage::ComplexMessage_MapMessage(const ComplexMessage_MapMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexMessage_MapMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){from._impl_.str_}
    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:ComplexMessage.MapMessage)
}

inline void ComplexMessage_MapMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){arena}
    , decltype(_impl_.value_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComplexMessage_MapMessage::~ComplexMessage_MapMessage() {
  // @@protoc_insertion_point(destructor:ComplexMessage.MapMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexMessage_MapMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_str()->~RepeatedPtrField();
}

void ComplexMessage_MapMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexMessage_MapMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ComplexMessage.MapMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_str()->Clear();
  _impl_.value_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexMessage_MapMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ComplexMessage.MapMessage.str"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComplexMessage_MapMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComplexMessage.MapMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_value(), target);
  }

  // repeated string str = 2;
  for (int i = 0, n = this->_internal_str_size(); i < n; ++i) {
    const auto& s = this->_internal_str(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ComplexMessage.MapMessage.str");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComplexMessage.MapMessage)
  return target;
}

::size_t ComplexMessage_MapMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComplexMessage.MapMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string str = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_str().size());
  for (int i = 0, n = _internal_str().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_str().Get(i));
  }

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexMessage_MapMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexMessage_MapMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexMessage_MapMessage::GetClassData() const { return &_class_data_; }


void ComplexMessage_MapMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexMessage_MapMessage*>(&to_msg);
  auto& from = static_cast<const ComplexMessage_MapMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ComplexMessage.MapMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_str()->MergeFrom(from._internal_str());
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexMessage_MapMessage::CopyFrom(const ComplexMessage_MapMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComplexMessage.MapMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage_MapMessage::IsInitialized() const {
  return true;
}

void ComplexMessage_MapMessage::InternalSwap(ComplexMessage_MapMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_str()->InternalSwap(
      other->_internal_mutable_str());

  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexMessage_MapMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}
// ===================================================================

ComplexMessage_MessageMapEntry_DoNotUse::ComplexMessage_MessageMapEntry_DoNotUse() {}
ComplexMessage_MessageMapEntry_DoNotUse::ComplexMessage_MessageMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ComplexMessage_MessageMapEntry_DoNotUse::MergeFrom(const ComplexMessage_MessageMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ComplexMessage_MessageMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}
// ===================================================================

class ComplexMessage::_Internal {
 public:
};

ComplexMessage::ComplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ComplexMessage)
}
ComplexMessage::ComplexMessage(const ComplexMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){from._impl_.msg_}
    , /*decltype(_impl_.messagemap_)*/{}
    , decltype(_impl_.values_) { from._impl_.values_ }
    ,/* _impl_._values_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.str_) {}

    , decltype(_impl_.numvalue_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.messagemap_.MergeFrom(from._impl_.messagemap_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    _this->_impl_.str_.Set(from._internal_str(), _this->GetArenaForAllocation());
  }
  _this->_impl_.numvalue_ = from._impl_.numvalue_;
  // @@protoc_insertion_point(copy_constructor:ComplexMessage)
}

inline void ComplexMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){arena}
    , /*decltype(_impl_.messagemap_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.values_) { arena }
    ,/* _impl_._values_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.str_) {}

    , decltype(_impl_.numvalue_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexMessage::~ComplexMessage() {
  // @@protoc_insertion_point(destructor:ComplexMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_msg()->~RepeatedPtrField();
  _impl_.messagemap_.~MapField();
  _impl_.values_.~RepeatedField();
  _impl_.str_.Destroy();
}

void ComplexMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ComplexMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_msg()->Clear();
  _impl_.messagemap_.Clear();
  _internal_mutable_values()->Clear();
  _impl_.str_.ClearToEmpty();
  _impl_.numvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ComplexMessage.NestedMessage msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, .ComplexMessage.MapMessage> messageMap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.messagemap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ComplexMessage.str"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 numValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.numvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComplexMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComplexMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ComplexMessage.NestedMessage msg = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .ComplexMessage.MapMessage> messageMap = 2;
  if (!this->_internal_messagemap().empty()) {
    using MapType = ::_pb::Map<std::string, ::ComplexMessage_MapMessage>;
    using WireHelper = ComplexMessage_MessageMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_messagemap();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ComplexMessage.messageMap");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated int32 values = 3;
  {
    int byte_size = _impl_._values_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_values(),
                                                 byte_size, target);
    }
  }

  // string str = 4;
  if (!this->_internal_str().empty()) {
    const std::string& _s = this->_internal_str();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ComplexMessage.str");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 numValue = 5;
  if (this->_internal_numvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_numvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComplexMessage)
  return target;
}

::size_t ComplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComplexMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ComplexMessage.NestedMessage msg = 1;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->_internal_msg()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .ComplexMessage.MapMessage> messageMap = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_messagemap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ComplexMessage_MapMessage >::const_iterator
      it = this->_internal_messagemap().begin();
      it != this->_internal_messagemap().end(); ++it) {
    total_size += ComplexMessage_MessageMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 values = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_values())
    ;
    _impl_._values_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string str = 4;
  if (!this->_internal_str().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_str());
  }

  // int32 numValue = 5;
  if (this->_internal_numvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_numvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexMessage::GetClassData() const { return &_class_data_; }


void ComplexMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexMessage*>(&to_msg);
  auto& from = static_cast<const ComplexMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ComplexMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_msg()->MergeFrom(from._internal_msg());
  _this->_impl_.messagemap_.MergeFrom(from._impl_.messagemap_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (!from._internal_str().empty()) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_numvalue() != 0) {
    _this->_internal_set_numvalue(from._internal_numvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexMessage::CopyFrom(const ComplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage::IsInitialized() const {
  return true;
}

void ComplexMessage::InternalSwap(ComplexMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_msg()->InternalSwap(other->_internal_mutable_msg());
  _impl_.messagemap_.InternalSwap(&other->_impl_.messagemap_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.str_, lhs_arena,
                                       &other->_impl_.str_, rhs_arena);

  swap(_impl_.numvalue_, other->_impl_.numvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[9]);
}
// ===================================================================

class TestKeyMessage::_Internal {
 public:
};

TestKeyMessage::TestKeyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestKeyMessage)
}
TestKeyMessage::TestKeyMessage(const TestKeyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestKeyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.numvalues_) { from._impl_.numvalues_ }
    ,/* _impl_._numvalues_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.data_) {}

    , decltype(_impl_.index_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TestKeyMessage)
}

inline void TestKeyMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.numvalues_) { arena }
    ,/* _impl_._numvalues_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.data_) {}

    , decltype(_impl_.index_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestKeyMessage::~TestKeyMessage() {
  // @@protoc_insertion_point(destructor:TestKeyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestKeyMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.numvalues_.~RepeatedField();
  _impl_.data_.Destroy();
}

void TestKeyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestKeyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TestKeyMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_numvalues()->Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestKeyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 numValues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_numvalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_numvalues(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestKeyMessage.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestKeyMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestKeyMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_index(), target);
  }

  // repeated int64 numValues = 3;
  {
    int byte_size = _impl_._numvalues_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(3, _internal_numvalues(),
                                                 byte_size, target);
    }
  }

  // string data = 4;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "TestKeyMessage.data");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestKeyMessage)
  return target;
}

::size_t TestKeyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestKeyMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 numValues = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_numvalues())
    ;
    _impl_._numvalues_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  // int32 index = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestKeyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestKeyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestKeyMessage::GetClassData() const { return &_class_data_; }


void TestKeyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestKeyMessage*>(&to_msg);
  auto& from = static_cast<const TestKeyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestKeyMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.numvalues_.MergeFrom(from._impl_.numvalues_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestKeyMessage::CopyFrom(const TestKeyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestKeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestKeyMessage::IsInitialized() const {
  return true;
}

void TestKeyMessage::InternalSwap(TestKeyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.numvalues_.InternalSwap(&other->_impl_.numvalues_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);

  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestKeyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[10]);
}
// ===================================================================

class StringKeyMessage::_Internal {
 public:
};

StringKeyMessage::StringKeyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:StringKeyMessage)
}
StringKeyMessage::StringKeyMessage(const StringKeyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringKeyMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.number_) {}

    , decltype(_impl_.floatnumber_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.number_, &from._impl_.number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.floatnumber_) -
    reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.floatnumber_));
  // @@protoc_insertion_point(copy_constructor:StringKeyMessage)
}

inline void StringKeyMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.number_) { ::uint64_t{0u} }

    , decltype(_impl_.floatnumber_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringKeyMessage::~StringKeyMessage() {
  // @@protoc_insertion_point(destructor:StringKeyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringKeyMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void StringKeyMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringKeyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StringKeyMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.floatnumber_) -
      reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.floatnumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringKeyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StringKeyMessage.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float floatNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.floatnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StringKeyMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StringKeyMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "StringKeyMessage.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_number(), target);
  }

  // float floatNumber = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_floatnumber = this->_internal_floatnumber();
  ::uint32_t raw_floatnumber;
  memcpy(&raw_floatnumber, &tmp_floatnumber, sizeof(tmp_floatnumber));
  if (raw_floatnumber != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_floatnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StringKeyMessage)
  return target;
}

::size_t StringKeyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StringKeyMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint64 number = 2;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_number());
  }

  // float floatNumber = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_floatnumber = this->_internal_floatnumber();
  ::uint32_t raw_floatnumber;
  memcpy(&raw_floatnumber, &tmp_floatnumber, sizeof(tmp_floatnumber));
  if (raw_floatnumber != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringKeyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringKeyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringKeyMessage::GetClassData() const { return &_class_data_; }


void StringKeyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringKeyMessage*>(&to_msg);
  auto& from = static_cast<const StringKeyMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StringKeyMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_floatnumber = from._internal_floatnumber();
  ::uint32_t raw_floatnumber;
  memcpy(&raw_floatnumber, &tmp_floatnumber, sizeof(tmp_floatnumber));
  if (raw_floatnumber != 0) {
    _this->_internal_set_floatnumber(from._internal_floatnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringKeyMessage::CopyFrom(const StringKeyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StringKeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringKeyMessage::IsInitialized() const {
  return true;
}

void StringKeyMessage::InternalSwap(StringKeyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringKeyMessage, _impl_.floatnumber_)
      + sizeof(StringKeyMessage::_impl_.floatnumber_)
      - PROTOBUF_FIELD_OFFSET(StringKeyMessage, _impl_.number_)>(
          reinterpret_cast<char*>(&_impl_.number_),
          reinterpret_cast<char*>(&other->_impl_.number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringKeyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[11]);
}
// ===================================================================

class ComplexKeyTestMessage_Position::_Internal {
 public:
};

ComplexKeyTestMessage_Position::ComplexKeyTestMessage_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ComplexKeyTestMessage.Position)
}
ComplexKeyTestMessage_Position::ComplexKeyTestMessage_Position(const ComplexKeyTestMessage_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ComplexKeyTestMessage.Position)
}

inline void ComplexKeyTestMessage_Position::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComplexKeyTestMessage_Position::~ComplexKeyTestMessage_Position() {
  // @@protoc_insertion_point(destructor:ComplexKeyTestMessage.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexKeyTestMessage_Position::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComplexKeyTestMessage_Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexKeyTestMessage_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:ComplexKeyTestMessage.Position)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexKeyTestMessage_Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComplexKeyTestMessage_Position::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComplexKeyTestMessage.Position)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComplexKeyTestMessage.Position)
  return target;
}

::size_t ComplexKeyTestMessage_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComplexKeyTestMessage.Position)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexKeyTestMessage_Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexKeyTestMessage_Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexKeyTestMessage_Position::GetClassData() const { return &_class_data_; }


void ComplexKeyTestMessage_Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexKeyTestMessage_Position*>(&to_msg);
  auto& from = static_cast<const ComplexKeyTestMessage_Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ComplexKeyTestMessage.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexKeyTestMessage_Position::CopyFrom(const ComplexKeyTestMessage_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComplexKeyTestMessage.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexKeyTestMessage_Position::IsInitialized() const {
  return true;
}

void ComplexKeyTestMessage_Position::InternalSwap(ComplexKeyTestMessage_Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexKeyTestMessage_Position, _impl_.y_)
      + sizeof(ComplexKeyTestMessage_Position::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ComplexKeyTestMessage_Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexKeyTestMessage_Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[12]);
}
// ===================================================================

class ComplexKeyTestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ComplexKeyTestMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComplexKeyTestMessage, _impl_._has_bits_);
  static const ::ComplexKeyTestMessage_Position& pos(const ComplexKeyTestMessage* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ComplexKeyTestMessage_Position&
ComplexKeyTestMessage::_Internal::pos(const ComplexKeyTestMessage* msg) {
  return *msg->_impl_.pos_;
}
ComplexKeyTestMessage::ComplexKeyTestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ComplexKeyTestMessage)
}
ComplexKeyTestMessage::ComplexKeyTestMessage(const ComplexKeyTestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexKeyTestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numvalues_) { from._impl_.numvalues_ }
    ,/* _impl_._numvalues_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.data_) {}

    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.enumvalue_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pos_ = new ::ComplexKeyTestMessage_Position(*from._impl_.pos_);
  }
  _this->_impl_.enumvalue_ = from._impl_.enumvalue_;
  // @@protoc_insertion_point(copy_constructor:ComplexKeyTestMessage)
}

inline void ComplexKeyTestMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numvalues_) { arena }
    ,/* _impl_._numvalues_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.data_) {}

    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.enumvalue_) { 0 }

  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexKeyTestMessage::~ComplexKeyTestMessage() {
  // @@protoc_insertion_point(destructor:ComplexKeyTestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexKeyTestMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.numvalues_.~RepeatedField();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void ComplexKeyTestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexKeyTestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ComplexKeyTestMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_numvalues()->Clear();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pos_ != nullptr);
    _impl_.pos_->Clear();
  }
  _impl_.enumvalue_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexKeyTestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ComplexKeyTestMessage.Position pos = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ComplexKeyTestMessage.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 numValues = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_numvalues(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_numvalues(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ComplexKeyTestMessage.TestEnum enumValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_enumvalue(static_cast<::ComplexKeyTestMessage_TestEnum>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ComplexKeyTestMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComplexKeyTestMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ComplexKeyTestMessage.Position pos = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ComplexKeyTestMessage.data");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated int64 numValues = 3;
  {
    int byte_size = _impl_._numvalues_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(3, _internal_numvalues(),
                                                 byte_size, target);
    }
  }

  // .ComplexKeyTestMessage.TestEnum enumValue = 4;
  if (this->_internal_enumvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_enumvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComplexKeyTestMessage)
  return target;
}

::size_t ComplexKeyTestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComplexKeyTestMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 numValues = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_numvalues())
    ;
    _impl_._numvalues_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  // .ComplexKeyTestMessage.Position pos = 1 [(.ProtoDatabase.Proto.objectKeyField) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .ComplexKeyTestMessage.TestEnum enumValue = 4;
  if (this->_internal_enumvalue() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_enumvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexKeyTestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexKeyTestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexKeyTestMessage::GetClassData() const { return &_class_data_; }


void ComplexKeyTestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexKeyTestMessage*>(&to_msg);
  auto& from = static_cast<const ComplexKeyTestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ComplexKeyTestMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.numvalues_.MergeFrom(from._impl_.numvalues_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pos()->::ComplexKeyTestMessage_Position::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_enumvalue() != 0) {
    _this->_internal_set_enumvalue(from._internal_enumvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexKeyTestMessage::CopyFrom(const ComplexKeyTestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComplexKeyTestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexKeyTestMessage::IsInitialized() const {
  return true;
}

void ComplexKeyTestMessage::InternalSwap(ComplexKeyTestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.numvalues_.InternalSwap(&other->_impl_.numvalues_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexKeyTestMessage, _impl_.enumvalue_)
      + sizeof(ComplexKeyTestMessage::_impl_.enumvalue_)
      - PROTOBUF_FIELD_OFFSET(ComplexKeyTestMessage, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexKeyTestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[13]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TestMessage_TestNestedMessage*
Arena::CreateMaybeMessage< ::TestMessage_TestNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestMessage_TestNestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TestMessage*
Arena::CreateMaybeMessage< ::TestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TestMap_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::TestMap_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestMap_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TestMap*
Arena::CreateMaybeMessage< ::TestMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TestRepeated_TestMessage*
Arena::CreateMaybeMessage< ::TestRepeated_TestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestRepeated_TestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TestRepeated*
Arena::CreateMaybeMessage< ::TestRepeated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestRepeated >(arena);
}
template<> PROTOBUF_NOINLINE ::ComplexMessage_NestedMessage*
Arena::CreateMaybeMessage< ::ComplexMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComplexMessage_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ComplexMessage_MapMessage*
Arena::CreateMaybeMessage< ::ComplexMessage_MapMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComplexMessage_MapMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ComplexMessage_MessageMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::ComplexMessage_MessageMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComplexMessage_MessageMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ComplexMessage*
Arena::CreateMaybeMessage< ::ComplexMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComplexMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TestKeyMessage*
Arena::CreateMaybeMessage< ::TestKeyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestKeyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StringKeyMessage*
Arena::CreateMaybeMessage< ::StringKeyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StringKeyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ComplexKeyTestMessage_Position*
Arena::CreateMaybeMessage< ::ComplexKeyTestMessage_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComplexKeyTestMessage_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::ComplexKeyTestMessage*
Arena::CreateMaybeMessage< ::ComplexKeyTestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComplexKeyTestMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
